// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // uses connection pooling
  directUrl = env("DATABASE_URL_UNPOOLED") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                    String                  @id @default(cuid())
  name                  String?
  email                 String                  @unique
  emailVerified         DateTime?
  image                 String?
  username              String?
  accounts              Account[]
  sessions              Session[]
  UserOtherData         UserOtherData[]
  UserClient            UserClient[]
  UserProject           UserProject[]
  UserSoftware          UserSoftware[]
  Alert                 Alert[]
  Project_Task          Project_Task[]
  Project_Book_WorkFlow Project_Book_WorkFlow[]
}

model UserOtherData {
  userId     String   @id
  firstname  String?
  lastname   String?
  password   String?
  civility   String?
  cgv        Boolean  @default(false)
  gdpr       Boolean  @default(false)
  isBlocked  Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isInternal Boolean  @default(false)
  isSetup    Boolean  @default(false)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Client {
  slug               String               @unique
  socialReason       String
  dateStartTrial     DateTime?
  dateEndTrial       DateTime?
  siren              String               @id
  ape                String?
  address1           String?
  address2           String?
  address3           String?
  address4           String?
  city               String?
  codeZip            String?
  country            String?
  invoiceAddress1    String?
  invoiceAddress2    String?
  invoiceAddress3    String?
  invoiceAddress4    String?
  invoiceCity        String?
  invoiceCodeZip     String?
  invoiceCountry     String?
  isBlocked          Boolean
  invoiceStart       DateTime?
  invoiceEnd         DateTime?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  createdBy          String
  UserClient         UserClient[]
  Invitation         Invitation[]
  Contact            Contact[]
  Software           Software[]
  Software_Component Software_Component[]
  Project            Project[]
  Logger             Logger[]
}

model Contact {
  id        String   @id @default(cuid())
  firstname String
  lastname  String
  email     String
  phone     String?
  civility  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String
  clientId  String
  client    Client   @relation(fields: [clientId], references: [siren], onDelete: Cascade)
}

model UserClient {
  userId          String
  clientId        String
  isBlocked       Boolean
  isBillable      Boolean
  isAdministrator Boolean  @default(false)
  isEditor        Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isActivated     Boolean  @default(false)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  client          Client   @relation(fields: [clientId], references: [siren], onDelete: Cascade)

  @@id([userId, clientId])
}

model Invitation {
  email                  String   @unique
  sendEmail              Boolean
  civility               String
  firstname              String
  lastname               String
  isBlocked              Boolean  @default(false)
  isBillable             Boolean  @default(false)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  createdBy              String
  isEditorProject        Boolean  @default(false)
  isAdministratorProject Boolean  @default(false)
  isValidatorProject     Boolean  @default(false)
  isInternal             Boolean  @default(false)
  clientId               String
  client                 Client   @relation(fields: [clientId], references: [siren], onDelete: Cascade)
  softwareLabel          String
  Software               Software @relation(fields: [softwareLabel, clientId], references: [label, clientId], onDelete: Cascade)
  projectLabel           String?
  projectSoftwareLabel   String?
  isAdministratorClient  Boolean  @default(false)
  isEditorClient         Boolean  @default(false)
  source                 String
  isArchived             Boolean  @default(false)

  @@id([email, clientId])
}

model Project_Invitation {
  projectLabel         String
  projectSoftwareLabel String
  clientId             String
  Project              Project  @relation(fields: [clientId, projectLabel, projectSoftwareLabel], references: [clientId, label, softwareLabel], onDelete: Cascade)
  email                String
  isAdministrator      Boolean  @default(false)
  isEditor             Boolean  @default(false)
  isValidator          Boolean  @default(false)
  createdAt            DateTime @default(now())
  createdBy            String
  updatedAt            DateTime @updatedAt

  @@id([projectLabel, projectSoftwareLabel, clientId, email])
}

model Software {
  label                   String
  slug                    String                    @unique
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  createdBy               String
  clientId                String
  client                  Client                    @relation(fields: [clientId], references: [siren], onDelete: Cascade)
  Software_Book           Software_Book[]
  Software_Component      Software_Component[]
  SoftwareItems           Software_Items[]
  UserSoftware            UserSoftware[]
  Software_Setting        Software_Setting[]
  Project                 Project[]
  Software_Task           Software_Task[]
  Software_Absence        Software_Absence[]
  Software_Constant_Legal Software_Constant_Legal[]
  Software_Counter        Software_Counter[]
  Software_Profile        Software_Profile[]
  isArchived              Boolean                   @default(false)
  Software_Accumulation   Software_Accumulation[]
  Invitation              Invitation[]

  @@id([label, clientId])
}

model UserSoftware {
  userId           String
  createdAt        DateTime @default(now())
  isEditor         Boolean  @default(false)
  updatedAt        DateTime @updatedAt
  createdBy        String   @default("system")
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  software         Software @relation(fields: [softwareLabel, softwareClientId], references: [label, clientId], onDelete: Cascade)
  softwareLabel    String
  softwareClientId String
  isActivated      Boolean  @default(false)

  @@id([userId, softwareLabel, softwareClientId])
}

model Software_Book {
  label           String
  description     String
  status          String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  createdBy       String
  software        Software           @relation(fields: [softwareLabel, clientId], references: [label, clientId], onDelete: Cascade)
  softwareLabel   String
  clientId        String
  StandardChapter Software_Chapter[]
  slug            String             @unique
  Software_Task   Software_Task[]

  @@id([label, softwareLabel, clientId])
}

model Book {
  label       String
  description String
  status      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   String    @default("system")
  slug        String    @unique
  Chapter     Chapter[]
  Task        Task[]

  @@id([label])
}

model Chapter {
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  createdBy   String        @default("system")
  level_1     Int
  level_2     Int
  level_3     Int
  id          String        @unique @default(cuid())
  slug        String        @unique
  label       String
  bookLabel   String
  parentId    String?
  Book        Book          @relation(fields: [bookLabel], references: [label])
  parent      Chapter?      @relation("levelUp", fields: [parentId], references: [id])
  Chapter     Chapter[]     @relation("levelUp")
  ChapterForm ChapterForm[]

  @@id([bookLabel, level_1, level_2, level_3])
}

model ChapterForm {
  level_1     Int
  level_2     Int
  level_3     Int
  order       Int      @default(1)
  bookLabel   String
  Chapter     Chapter  @relation(fields: [bookLabel, level_1, level_2, level_3], references: [bookLabel, level_1, level_2, level_3])
  Form        Form     @relation(fields: [formTitle, formType, formVersion], references: [title, type, version])
  formTitle   String
  formType    String
  formVersion Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   @default("system")

  @@id([bookLabel, level_1, level_2, level_3, formTitle, formType, formVersion])
}

model Software_Component {
  id                               String?
  label                            String
  description                      String?
  type                             String
  createdAt                        DateTime                           @default(now())
  updatedAt                        DateTime                           @updatedAt
  createdBy                        String
  clientId                         String
  version                          Int
  isForm                           Boolean?                           @default(false)
  isTextArea                       Boolean?                           @default(false)
  isImage                          Boolean?                           @default(false)
  isTable                          Boolean?                           @default(false)
  isArchived                       Boolean                            @default(false)
  buttonLabel                      String                             @default("Ajouter")
  slug                             String                             @unique
  status                           String
  software                         Software                           @relation(fields: [softwareLabel, clientId], references: [label, clientId], onDelete: Cascade)
  softwareLabel                    String
  client                           Client                             @relation(fields: [clientId], references: [siren], onDelete: Cascade)
  Software_Component_Input         Software_Component_Input[]
  SoftwareChapterSoftwareComponent SoftwareChapterSoftwareComponent[]
  Software_Component_TextArea      Software_Component_TextArea[]
  Software_Component_Image         Software_Component_Image[]
  Software_Table_Column            Software_Table_Column[]
  SandboxValues                    SandboxValues[]

  @@id([label, softwareLabel, clientId, type])
}

model Software_Component_Input {
  type                             String
  dsnType                          String?
  dsnItem                          String?
  otherData                        String?
  isDsnField                       Boolean?                           @default(false)
  isOtherData                      Boolean?                           @default(false)
  isDependOtherField               Boolean?                           @default(false)
  label                            String
  maxLength                        Int?                               @default(255)
  minLength                        Int?                               @default(0)
  minValue                         Int?                               @default(0)
  maxValue                         Int?                               @default(9999)
  placeholder                      String?                            @default("Saisir une valeur")
  order                            Int
  formSource                       String?
  inputSource                      String?
  defaultValue                     String?                            @default("")
  required                         Boolean?                           @default(false)
  readonly                         Boolean?                           @default(false)
  multiple                         Boolean?                           @default(false)
  createdAt                        DateTime                           @default(now())
  updatedAt                        DateTime                           @updatedAt
  createdBy                        String
  Software_Component               Software_Component                 @relation(fields: [componentLabel, softwareLabel, clientId, componentType], references: [label, softwareLabel, clientId, type], onDelete: Cascade)
  componentLabel                   String
  softwareLabel                    String
  clientId                         String
  isCode                           Boolean?                           @default(false)
  isDescription                    Boolean?                           @default(false)
  isLabel                          Boolean?                           @default(false)
  componentType                    String
  id                               String                             @unique @default(cuid())
  Software_Component_Select_Option Software_Component_Select_Option[]
  SandboxValues                    SandboxValues[]

  @@id([componentLabel, softwareLabel, clientId, label])
}

model Software_Component_TextArea {
  value              Json               @default("{}")
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  createdBy          String
  Software_Component Software_Component @relation(fields: [componentLabel, softwareLabel, componentType, clientId], references: [label, softwareLabel, type, clientId], onDelete: Cascade)
  clientId           String
  componentLabel     String
  componentType      String
  softwareLabel      String
  isArchived         Boolean            @default(false)

  @@id([componentLabel, softwareLabel, clientId, componentType])
}

model Software_Component_Image {
  description        String
  provider           String
  slug               String             @unique
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  createdBy          String
  Software_Component Software_Component @relation(fields: [componentLabel, softwareLabel, componentType, clientId], references: [label, softwareLabel, type, clientId], onDelete: Cascade)
  clientId           String
  componentLabel     String
  softwareLabel      String
  version            Int
  componentType      String
  url                String
  device             String
  downloadUrl        String
  pathname           String
  contentType        String
  contentDisposition String
  isArchived         Boolean            @default(false)

  @@id([componentLabel, softwareLabel, clientId, version, componentType])
}

model Software_Component_Select_Option {
  label                    String
  selected                 Boolean?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  createdBy                String
  Software_Component_Input Software_Component_Input? @relation(fields: [inputLabel, clientId, softwareLabel, componentLabel], references: [label, clientId, softwareLabel, componentLabel], onDelete: Cascade)
  clientId                 String
  componentLabel           String
  softwareLabel            String
  inputLabel               String

  @@id([inputLabel, clientId, softwareLabel, componentLabel, label])
}

model Software_Chapter {
  createdAt                        DateTime                           @default(now())
  updatedAt                        DateTime                           @updatedAt
  createdBy                        String
  level_1                          Int
  level_2                          Int
  level_3                          Int
  id                               String                             @unique @default(cuid())
  slug                             String                             @unique
  label                            String
  Software_Book                    Software_Book                      @relation(fields: [clientId, bookLabel, bookSoftwareLabel], references: [clientId, label, softwareLabel], onDelete: Cascade)
  clientId                         String
  bookLabel                        String
  bookSoftwareLabel                String
  SoftwareChapterSoftwareComponent SoftwareChapterSoftwareComponent[]
  parentId                         String?
  parent                           Software_Chapter?                  @relation("levelUp", fields: [parentId], references: [id])
  Software_Chapter                 Software_Chapter[]                 @relation("levelUp")

  @@id([clientId, bookLabel, bookSoftwareLabel, level_1, level_2, level_3])
}

model SoftwareChapterSoftwareComponent {
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  createdBy          String
  order              Int                @default(1)
  Software_Chapter   Software_Chapter   @relation(fields: [clientId, bookLabel, softwareLabel, level_1, level_2, level_3], references: [clientId, bookLabel, bookSoftwareLabel, level_1, level_2, level_3], onDelete: Cascade)
  Software_Component Software_Component @relation(fields: [componentLabel, softwareLabel, clientId, componentType], references: [label, softwareLabel, clientId, type], onDelete: Cascade)
  componentLabel     String
  softwareLabel      String
  clientId           String
  componentType      String
  bookLabel          String
  bookSoftwareLabel  String
  level_1            Int
  level_2            Int
  level_3            Int

  @@id([clientId, bookLabel, level_1, level_2, level_3, componentLabel, softwareLabel, componentType])
}

model Project {
  clientId           String
  client             Client               @relation(fields: [clientId], references: [siren], onDelete: Cascade)
  logo               String?
  label              String
  description        String
  status             String               @default("actif")
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  createdBy          String
  Software           Software             @relation(fields: [softwareLabel, clientId], references: [label, clientId], onDelete: Cascade)
  softwareLabel      String
  UserProject        UserProject[]
  Project_Book       Project_Book[]
  Logger             Logger[]
  Project_Attachment Project_Attachment[]
  slug               String               @unique
  Project_Constant   Project_Constant[]
  Project_Items      Project_Items[]
  Project_Task       Project_Task[]
  Project_Invitation Project_Invitation[]
  Project_DSN_Data   Project_DSN_Data[]

  @@id([clientId, softwareLabel, label])
}

model UserProject {
  userId               String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  createdBy            String
  isAdmin              Boolean  @default(false)
  isEditor             Boolean  @default(false)
  isValidator          Boolean  @default(false)
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project              Project  @relation(fields: [projectClientId, projectLabel, projectSoftwareLabel], references: [clientId, label, softwareLabel], onDelete: Cascade)
  projectClientId      String
  projectSoftwareLabel String
  projectLabel         String
  team                 String
  role                 String?
  isBlocked            Boolean  @default(false)

  @@id([userId, projectClientId, projectLabel, projectSoftwareLabel])
}

model Project_Book {
  label                     String
  slug                      String                  @unique
  description               String
  isHold                    Boolean                 @default(false)
  isStarted                 Boolean                 @default(false)
  isValidate                Boolean                 @default(false)
  isModifiedAfertValidation Boolean                 @default(false)
  isArchived                Boolean                 @default(false)
  ProjectChapter            Project_Chapter[]
  project                   Project                 @relation(fields: [clientId, projectLabel, projectSoftwareLabel], references: [clientId, label, softwareLabel], onDelete: Cascade)
  clientId                  String
  projectLabel              String
  projectSoftwareLabel      String
  createdAt                 DateTime                @default(now())
  updatedAt                 DateTime                @updatedAt
  createdBy                 String
  Project_Book_WorkFlow     Project_Book_WorkFlow[]

  @@id([clientId, label, projectLabel, projectSoftwareLabel])
}

model Project_Book_WorkFlow {
  userId        String
  projectLabel  String
  softwareLabel String
  bookLabel     String
  clientId      String
  isValid       Boolean      @default(false)
  comment       String?
  deadline      DateTime     @default("4000-01-01T00:00:00Z")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  createdBy     String       @default("system")
  Project_Book  Project_Book @relation(fields: [clientId, projectLabel, softwareLabel, bookLabel], references: [clientId, projectLabel, projectSoftwareLabel, label], onDelete: Cascade)
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, projectLabel, softwareLabel, clientId, bookLabel])
}

model Project_Chapter {
  level_1              Int
  level_2              Int
  level_3              Int
  label                String
  parentId             String?
  parent               Project_Chapter?    @relation("levelUp", fields: [bookLabel, clientId, projectLabel, level_1, level_2, level_3, projectSoftwareLabel], references: [bookLabel, clientId, projectLabel, level_1, level_2, level_3, projectSoftwareLabel])
  Project_Chapter      Project_Chapter[]   @relation("levelUp")
  Project_Component    Project_Component[]
  Project_Book         Project_Book        @relation(fields: [clientId, bookLabel, projectLabel, projectSoftwareLabel], references: [clientId, label, projectLabel, projectSoftwareLabel])
  clientId             String
  bookLabel            String
  projectLabel         String
  projectSoftwareLabel String
  slug                 String              @unique
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  createdBy            String

  @@id([bookLabel, clientId, projectLabel, projectSoftwareLabel, level_1, level_2, level_3])
}

model Project_Component {
  slug                 String           @unique
  label                String
  description          String
  type                 String
  buttonLabel          String           @default("Ajouter")
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  createdBy            String
  Project_Chapter      Project_Chapter? @relation(fields: [bookLabel, projectLabel, clientId, chapterLevel_1, chapterLevel_2, chapterLevel_3, projectSoftwareLabel], references: [bookLabel, projectLabel, clientId, level_1, level_2, level_3, projectSoftwareLabel], onDelete: Cascade)
  chapterSlug          String?
  bookLabel            String
  projectLabel         String
  projectSoftwareLabel String
  clientId             String
  chapterLevel_1       Int
  chapterLevel_2       Int
  chapterLevel_3       Int
  isForm               Boolean?         @default(false)
  isTextArea           Boolean?         @default(false)
  isImage              Boolean?         @default(false)
  Project_Input        Project_Input[]

  @@id([bookLabel, projectLabel, clientId, chapterLevel_1, chapterLevel_2, chapterLevel_3, projectSoftwareLabel])
}

model Project_Input {
  slug                 String             @unique @default(cuid())
  type                 String
  dsnType              String?
  dsnItem              String?
  label                String
  otherData            String?
  maxLength            Int?
  minLength            Int?
  minValue             Int?
  maxValue             Int?
  placeholder          String?
  order                Int
  defaultValue         String?
  required             Boolean            @default(false)
  readonly             Boolean            @default(false)
  inputSource          String?
  multiple             Boolean?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  createdBy            String
  componentLabel       String
  Projet_Composant     Project_Component? @relation(fields: [bookLabel, projectLabel, clientId, chapterLevel_1, chapterLevel_2, chapterLevel_3, projectSoftwareLabel], references: [bookLabel, projectLabel, clientId, chapterLevel_1, chapterLevel_2, chapterLevel_3, projectSoftwareLabel], onDelete: Cascade)
  clientId             String
  bookLabel            String
  projectLabel         String
  projectSoftwareLabel String
  isCode               Boolean?           @default(false)
  isDescription        Boolean?           @default(false)
  isLabel              Boolean?           @default(false)
  chapterLevel_1       Int
  chapterLevel_2       Int
  chapterLevel_3       Int
  formSource           String?
  Project_Value        Project_Value[]
  Project_Option       Project_Option[]

  @@id([clientId, bookLabel, projectLabel, chapterLevel_1, chapterLevel_2, chapterLevel_3, label, projectSoftwareLabel])
}

model Project_Value {
  version              Int
  recordId             String
  label                String
  textValue            String?
  numberValue          Int?
  booleanValue         Boolean?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  createdBy            String
  Project_Input        Project_Input @relation(fields: [clientId, bookLabel, projectLabel, chapterLevel_1, chapterLevel_2, chapterLevel_3, inputLabel, projectSoftwareLabel], references: [clientId, bookLabel, projectLabel, chapterLevel_1, chapterLevel_2, chapterLevel_3, label, projectSoftwareLabel])
  clientId             String
  bookLabel            String
  inputLabel           String
  formSource           String?
  inputSource          String?
  projectLabel         String
  projectSoftwareLabel String
  componentLabel       String
  chapterLevel_1       Int
  chapterLevel_2       Int
  chapterLevel_3       Int
  dsnEstablishementId  String?
  dsnRateAtId          String?
  dsnContractDsnId     String?
  isCode               Boolean?      @default(false)
  isDescription        Boolean?      @default(false)
  isLabel              Boolean?      @default(false)
  isActivated          Boolean       @default(false)
  origin               String // origin = "Analyse initiale" | "Post analyse"

  @@id([clientId, bookLabel, inputLabel, projectLabel, chapterLevel_1, chapterLevel_2, chapterLevel_3, version, projectSoftwareLabel, recordId])
}

model Project_Option {
  label                String
  selected             Boolean?
  Project_Input        Project_Input? @relation(fields: [clientId, bookLabel, inputLabel, projectLabel, chapterLevel_1, chapterLevel_2, chapterLevel_3, projectSoftwareLabel], references: [clientId, bookLabel, label, projectLabel, chapterLevel_1, chapterLevel_2, chapterLevel_3, projectSoftwareLabel])
  inputId              String?
  clientId             String
  bookLabel            String
  inputLabel           String
  projectLabel         String
  projectSoftwareLabel String
  chapterLevel_1       Int
  chapterLevel_2       Int
  chapterLevel_3       Int
  version              Int
  value                String

  @@id([clientId, bookLabel, inputLabel, projectLabel, chapterLevel_1, chapterLevel_2, chapterLevel_3, label, version, projectSoftwareLabel])
}

model Setting {
  id          String
  label       String
  description String?
  value       String
  dateStart   DateTime
  dateEnd     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  system      Boolean  @default(false)

  @@id([id, label, dateStart, dateEnd])
}

model Logger {
  id                   String   @id @default(cuid())
  level                String
  message              String
  scope                String
  createdAt            DateTime @default(now())
  createdBy            String
  isArchived           Boolean  @default(false)
  clientId             String?
  userId               String?
  client               Client?  @relation(fields: [clientId], references: [siren])
  project              Project? @relation(fields: [clientId, projectLabel, projectSoftwareLabel], references: [clientId, label, softwareLabel])
  projectSoftwareLabel String?
  projectLabel         String?
}

model SandboxValues {
  Software_Component_Input Software_Component_Input @relation(fields: [componentLabel, softwareLabel, clientId, inputLabel], references: [componentLabel, softwareLabel, clientId, label], onDelete: Cascade)
  value                    String
  createdBy                String
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @updatedAt
  Software_Component       Software_Component       @relation(fields: [componentLabel, softwareLabel, clientId, componentType], references: [label, softwareLabel, clientId, type])
  version                  Int
  componentLabel           String
  softwareLabel            String
  clientId                 String
  componentType            String
  inputLabel               String
  versionId                Int

  @@id([clientId, componentLabel, softwareLabel, componentType, inputLabel, version])
}

model Software_Items {
  id                   String // id de l'item standard ou id du logiciel si création par l'utilisateur
  idSoftware           String? // id du logiciel
  slug                 String   @unique
  software             Software @relation(fields: [softwareLabel, clientId], references: [label, clientId], onDelete: Cascade)
  softwareLabel        String
  clientId             String
  type                 String
  label                String
  description          String
  idccCode             String
  Idcc                 Idcc?    @relation(fields: [idccCode], references: [code])
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  createdBy            String
  base                 String?
  rate                 String?
  amount               String?
  status               String?
  employeeContribution String?
  employerContribution String?
  dateStart            DateTime
  isArchived           Boolean  @default(false)

  @@id([id, type, softwareLabel, clientId, dateStart])
}

model Software_Setting {
  id            String
  label         String
  description   String?
  value         String
  dateStart     DateTime
  dateEnd       DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String
  softwareLabel String
  clientId      String
  slug          String   @unique
  comment       String?
  Software      Software @relation(fields: [softwareLabel, clientId], references: [label, clientId], onDelete: Cascade)

  @@id([id, label, value, dateStart, clientId, softwareLabel])
}

model Project_Items {
  id                   String
  project              Project  @relation(fields: [projectLabel, projectSoftwareLabel, clientId], references: [label, softwareLabel, clientId], onDelete: Cascade)
  projectLabel         String
  projectSoftwareLabel String
  clientId             String
  type                 String
  label                String
  description          String
  idccCode             String
  Idcc                 Idcc?    @relation(fields: [idccCode], references: [code])
  version              Int
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  createdBy            String
  base                 String
  rate                 String
  amount               String
  status               String
  employeeContribution String
  employerContribution String

  @@id([id, type, projectLabel, projectSoftwareLabel, clientId, version])
}

model Constant_Legal {
  id            String
  level         String
  label         String
  description   String?
  idccCode      String   @default("9999")
  Idcc          Idcc?    @relation(fields: [idccCode], references: [code])
  value         String
  dateStart     DateTime @default(now())
  softwareLabel String?
  clientId      String?
  projectLabel  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String
  slug          String   @unique
  isDuplicate   Boolean  @default(false)
  sourceId      String?

  @@id([id, level, dateStart, isDuplicate])
}

model Software_Constant_Legal {
  id            String
  level         String
  label         String
  description   String?
  idccCode      String   @default("9999")
  Idcc          Idcc?    @relation(fields: [idccCode], references: [code])
  value         String
  dateStart     DateTime @default(now())
  softwareLabel String
  clientId      String
  software      Software @relation(fields: [softwareLabel, clientId], references: [label, clientId], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String
  slug          String   @unique
  isDuplicate   Boolean  @default(false)
  isArchived    Boolean  @default(false)

  @@id([id, level, dateStart, isDuplicate, clientId, softwareLabel])
}

model Project_Constant {
  code                 String
  label                String
  description          String
  idccCode             String
  Idcc                 Idcc?    @relation(fields: [idccCode], references: [code])
  value                String
  dateStart            DateTime
  projectLabel         String
  projectSoftwareLabel String
  clientId             String
  Project              Project  @relation(fields: [clientId, projectLabel, projectSoftwareLabel], references: [clientId, label, softwareLabel], onDelete: Cascade)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  createdBy            String

  @@id([code, dateStart, projectLabel, projectSoftwareLabel, clientId])
}

model Idcc {
  code                    String                    @id
  label                   String
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  createdBy               String                    @default("system")
  SoftwareItems           Software_Items[]
  ConstantLegal           Constant_Legal[]
  ProjectConstant         Project_Constant[]
  Project_Items           Project_Items[]
  Software_Constant_Legal Software_Constant_Legal[]
  Table                   Table[]
}

model Project_Attachment {
  label                String
  description          String
  slug                 String   @unique
  isObligatory         Boolean
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  createdBy            String
  project              Project  @relation(fields: [clientId, projectLabel, projectSoftwareLabel], references: [clientId, label, softwareLabel])
  projectLabel         String
  projectSoftwareLabel String
  clientId             String
  deliveryDeadline     DateTime @default(now())
  accept               String   @default("pdf")
  multiple             Boolean  @default(false)
  url                  String?
  isDelivered          Boolean  @default(false)

  @@id([label, projectLabel, clientId])
}

model Form {
  title       String
  type        String
  description String
  status      String
  buttonLabel String        @default("Ajouter")
  version     Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  createdBy   String
  Form_Input  Form_Input[]
  ChapterForm ChapterForm[]

  @@id([title, type, version])
}

model Form_Input {
  type          String
  label         String
  dsnType       String?
  dsnItem       String?
  otherData     String?
  maxLength     Int?
  minLength     Int?
  minValue      Int?
  maxValue      Int?
  placeholder   String?
  order         Int
  isCode        Boolean? @default(false)
  isDescription Boolean? @default(false)
  isLabel       Boolean? @default(false)
  defaultValue  String?
  required      Boolean
  readonly      Boolean
  multiple      Boolean?
  formSource    String?
  inputSource   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String
  Form          Form     @relation(fields: [formTitle, formType, formVersion], references: [title, type, version])
  formTitle     String
  formType      String
  formVersion   Int

  @@id([formTitle, formType, formVersion, label])
}

model Input {
  code        String   @id
  typeHtml    String
  isDsn       Boolean  @default(false)
  isOtherData Boolean  @default(false)
  label       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
}

model Prisma_Seed {
  name          String   @id
  description   String
  order         Int
  status        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String
  previousLabel String
  error         String?
}

model Alert {
  label     String
  message   String
  isViewed  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String
  dateStart DateTime
  dateEnd   DateTime
  userId    String
  User      User     @relation(fields: [userId], references: [id])

  @@id([label, userId])
}

model Task {
  label       String   @id()
  isSwitch    Boolean  @default(false)
  isUpload    Boolean  @default(false)
  accept      String?
  description String
  level       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   @default("system")
  bookLabel   String?
  Book        Book?    @relation(fields: [bookLabel], references: [label])
}

model Software_Task {
  label         String
  level         String
  isSwitch      Boolean        @default(false)
  isUpload      Boolean        @default(false)
  accept        String?
  slug          String         @unique
  softwareLabel String
  description   String
  clientId      String
  Software      Software       @relation(fields: [softwareLabel, clientId], references: [label, clientId])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  createdBy     String         @default("system")
  bookLabel     String?
  Software_Book Software_Book? @relation(fields: [bookLabel, softwareLabel, clientId], references: [label, softwareLabel, clientId])

  @@id([label, clientId, softwareLabel])
}

model Project_Task {
  label         String
  slug          String   @unique
  level         String
  isSwitch      Boolean  @default(false)
  isUpload      Boolean  @default(false)
  accept        String?
  description   String
  softwareLabel String
  clientId      String
  status        String   @default("actif")
  projectLabel  String
  bookLabel     String?
  Project       Project  @relation(fields: [clientId, projectLabel, softwareLabel], references: [clientId, label, softwareLabel])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String   @default("system")
  owner         String
  message       String?
  dateStart     DateTime @default(now())
  deadline      DateTime
  User          User     @relation(fields: [owner], references: [id])

  @@id([label, clientId, projectLabel, softwareLabel, owner])
}

model Absence {
  label            String   @id
  id               String   @unique
  description      String
  isPrintable      Boolean  @default(false)
  dsnCode          String?
  dsnLabel         String?
  isSocialSecurity Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  createdBy        String   @default("system")
}

model Item {
  id                       String
  nature                   String
  label                    String?
  type                     String
  baseType                 String?
  base                     String?
  rateType                 String?
  rate                     String?
  coeffType                String?
  coeff                    String?
  amountType               String?
  amount                   String?
  employeeContributionType String?
  employerContributionType String?
  employerContribution     String?
  employeeContribution     String?
  comment                  String?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  createdBy                String

  @@id([id, type])
}

model Counter {
  id          String   @id
  label       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   @default("system")
  inHours     Boolean  @default(false)
  inDays      Boolean  @default(false)
  isArchived  Boolean  @default(false)
}

model Software_Counter {
  id            String
  label         String
  description   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String   @default("system")
  softwareLabel String
  clientId      String
  inHours       Boolean  @default(false)
  inDays        Boolean  @default(false)
  Software      Software @relation(fields: [softwareLabel, clientId], references: [label, clientId])
  isArchived    Boolean  @default(false)

  @@id([id, label, clientId, softwareLabel])
}

model Software_Profile {
  id            String
  label         String
  description   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String   @default("system")
  softwareLabel String
  clientId      String
  Software      Software @relation(fields: [softwareLabel, clientId], references: [label, clientId])
  isArchived    Boolean  @default(false)

  @@id([id, label, clientId, softwareLabel])
}

model Software_Absence {
  label            String
  id               String
  description      String?
  isSocialSecurity Boolean  @default(false)
  softwareLabel    String
  slug             String   @unique
  clientId         String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  createdBy        String   @default("system")
  dsnCode          String?
  dsnLabel         String?
  Software         Software @relation(fields: [softwareLabel, clientId], references: [label, clientId])
  methodOfCalcul   String
  population       String?
  itemHour         String?
  itemDay          String?
  counter          String?
  isPrintable      Boolean  @default(false)
  isArchived       Boolean  @default(false)

  @@id([label, id, clientId, softwareLabel])
}

model Default_Setting {
  id          String
  label       String
  description String
  value       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String

  @@id([id, label])
}

model Dsn_OPS {
  id       String  @id
  label    String
  address1 String?
  codeZip  String?
  city     String?
}

model Dsn_Absence {
  id        String   @id
  label     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   @default("system")
}

model TextArea {
  label       String   @id
  value       Json     @default("{}")
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   @default("system")
  package     String
}

model Feedback {
  id         String   @id @default(cuid())
  feature    String
  message    String
  level      String
  isBlocked  Boolean  @default(false)
  isArchived Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  createdBy  String
}

model Project_DSN_Data {
  projectLabel         String
  projectSoftwareLabel String
  clientId             String
  id                   String
  value                String
  label                String
  Project              Project  @relation(fields: [clientId, projectLabel, projectSoftwareLabel], references: [clientId, label, softwareLabel])
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  createdBy            String
  date                 String
  siret                String
  order                Int

  @@id([projectLabel, projectSoftwareLabel, clientId, date, order, id, siret])
}

model Accumulation {
  id          String   @id
  label       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   @default("system")
}

model Software_Accumulation {
  id            String
  label         String
  description   String?
  clientId      String
  softwareLabel String
  Software      Software @relation(fields: [softwareLabel, clientId], references: [label, clientId])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String   @default("system")
  isArchived    Boolean  @default(false)
  slug          String   @unique

  @@id([id, label, clientId, softwareLabel])
}

model Table {
  id           String         @id
  type         String
  idcc         String?
  Idcc         Idcc?          @relation(fields: [idcc], references: [code])
  label        String
  description  String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  createdBy    String         @default("system")
  population   String?
  absence      String?
  Table_Column Table_Column[]
}

model Table_Column {
  id                 String
  tableId            String
  Table              Table                @relation(fields: [tableId], references: [id])
  label              String
  Table_Column_Value Table_Column_Value[]
  updatedAt          DateTime             @updatedAt
  createdAt          DateTime             @default(now())
  createdBy          String               @default("system")

  @@id([id, tableId])
}

model Table_Column_Value {
  id           String
  columnId     String
  tableId      String
  value        String
  row          Int
  updatedAt    DateTime     @updatedAt
  createdAt    DateTime     @default(now())
  createdBy    String       @default("system")
  Table_Column Table_Column @relation(fields: [columnId, tableId], references: [id, tableId])

  @@id([id, tableId, columnId])
}

model Software_Table_Column {
  id                   String
  tableId              String
  label                String
  componentType        String
  description          String?
  slug                 String                 @unique
  clientId             String
  softwareLabel        String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  createdBy            String                 @default("system")
  isArchived           Boolean                @default(false)
  componentLabel       String
  Software_Component   Software_Component     @relation(fields: [componentLabel, softwareLabel, clientId, componentType], references: [label, softwareLabel, clientId, type], onDelete: Cascade)
  Software_Table_Value Software_Table_Value[]

  @@id([id, tableId, clientId, softwareLabel, componentLabel, componentType])
}

model Software_Table_Value {
  id                    String
  componentLabel        String
  componentType         String
  tableId               String
  columnId              String
  slug                  String                @unique
  value                 String
  row                   Int
  updatedAt             DateTime              @updatedAt
  createdAt             DateTime              @default(now())
  createdBy             String                @default("system")
  clientId              String
  softwareLabel         String
  Software_Table_Column Software_Table_Column @relation(fields: [columnId, tableId, clientId, softwareLabel, componentLabel, componentType], references: [id, tableId, clientId, softwareLabel, componentLabel, componentType])

  @@id([id, tableId, columnId, clientId, softwareLabel])
}
