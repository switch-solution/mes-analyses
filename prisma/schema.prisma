// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String            @unique
  emailVerified   DateTime?
  image           String?
  username        String?
  accounts        Account[]
  sessions        Session[]
  UserOtherData   UserOtherData[]
  UserClient      UserClient[]
  UserProject     UserProject[]
  UserSoftware    UserSoftware[]
  Logger          Logger[]
  Page_Validation Page_Validation[]
}

model UserOtherData {
  userId     String   @id
  firstname  String?
  lastname   String?
  password   String?
  civility   String?
  cgv        Boolean  @default(false)
  gdpr       Boolean  @default(false)
  isBlocked  Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isInternal Boolean  @default(false)
  isSetup    Boolean  @default(false)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Client {
  slug           String       @unique
  socialReason   String
  dateStartTrial DateTime?
  dateEndTrial   DateTime?
  siren          String       @id
  isBlocked      Boolean
  invoiceStart   DateTime?
  invoiceEnd     DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  createdBy      String
  UserClient     UserClient[]
  Invitation     Invitation[]
  Software       Software[]
  Project        Project[]
  Logger         Logger[]
  Client_API     Client_API[]
}

model Client_API {
  clientId            String
  label               String
  limit               Int
  apiKey              String                @unique
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  createdBy           String                @default("system")
  client              Client                @relation(fields: [clientId], references: [siren], onDelete: Cascade)
  slug                String                @unique
  Client_API_Activity Client_API_Activity[]
  revoked             Boolean               @default(false)
  uuid                String                @default(cuid())

  @@id([clientId, uuid])
}

model Client_API_Activity {
  clientId   String
  uuidApi    String
  url        String
  ip         String?
  country    String?
  city       String?
  method     String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  createdBy  String     @default("system")
  Client_API Client_API @relation(fields: [clientId, uuidApi], references: [clientId, uuid], onDelete: Cascade)

  @@id([clientId, uuidApi, url, createdAt])
}

model UserClient {
  userId          String
  clientId        String
  isBlocked       Boolean
  isBillable      Boolean
  defaultRole     String
  isAdministrator Boolean  @default(false)
  isEditor        Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isActivated     Boolean  @default(false)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  client          Client   @relation(fields: [clientId], references: [siren], onDelete: Cascade)

  @@id([userId, clientId])
}

model Invitation {
  email                  String   @unique
  sendEmail              Boolean
  civility               String
  firstname              String
  defaultRole            String?
  lastname               String
  isBlocked              Boolean  @default(false)
  isBillable             Boolean  @default(false)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  createdBy              String
  isEditorProject        Boolean  @default(false)
  isAdministratorProject Boolean  @default(false)
  isValidatorProject     Boolean  @default(false)
  isInternal             Boolean  @default(false)
  clientId               String
  client                 Client   @relation(fields: [clientId], references: [siren], onDelete: Cascade)
  softwareLabel          String
  Software               Software @relation(fields: [softwareLabel, clientId], references: [label, clientId], onDelete: Cascade)
  projectLabel           String?
  projectSoftwareLabel   String?
  isAdministratorClient  Boolean  @default(false)
  isEditorClient         Boolean  @default(false)
  isArchived             Boolean  @default(false)

  @@id([email, clientId])
}

model Project_Invitation {
  projectLabel         String
  projectSoftwareLabel String
  clientId             String
  Project              Project  @relation(fields: [clientId, projectLabel, projectSoftwareLabel], references: [clientId, label, softwareLabel], onDelete: Cascade)
  email                String
  isAdministrator      Boolean  @default(false)
  isEditor             Boolean  @default(false)
  isValidator          Boolean  @default(false)
  createdAt            DateTime @default(now())
  createdBy            String
  updatedAt            DateTime @updatedAt

  @@id([projectLabel, projectSoftwareLabel, clientId, email])
}

model Software {
  label                 String
  slug                  String                  @unique
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  createdBy             String
  clientId              String
  client                Client                  @relation(fields: [clientId], references: [siren], onDelete: Cascade)
  SoftwareItems         Software_Items[]
  UserSoftware          UserSoftware[]
  Software_Setting      Software_Setting[]
  Project               Project[]
  Software_Absence      Software_Absence[]
  Software_Counter      Software_Counter[]
  Software_Profile      Software_Profile[]
  isArchived            Boolean                 @default(false)
  Software_Accumulation Software_Accumulation[]
  Invitation            Invitation[]
  Page                  Page[]

  @@id([label, clientId])
}

model UserSoftware {
  userId           String
  createdAt        DateTime @default(now())
  isEditor         Boolean  @default(false)
  updatedAt        DateTime @updatedAt
  createdBy        String   @default("system")
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  software         Software @relation(fields: [softwareLabel, softwareClientId], references: [label, clientId], onDelete: Cascade)
  softwareLabel    String
  softwareClientId String
  isActivated      Boolean  @default(false)

  @@id([userId, softwareLabel, softwareClientId])
}

// Tables editor

model Software_Items {
  id                   String // id de l'item standard ou id du logiciel si cr√©ation par l'utilisateur
  idSoftware           String? // id du logiciel
  slug                 String   @unique
  software             Software @relation(fields: [softwareLabel, clientId], references: [label, clientId], onDelete: Cascade)
  softwareLabel        String
  clientId             String
  type                 String
  label                String
  description          String
  idccCode             String
  Idcc                 Idcc?    @relation(fields: [idccCode], references: [code])
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  createdBy            String
  base                 String?
  rate                 String?
  amount               String?
  status               String?
  employeeContribution String?
  employerContribution String?
  dateStart            DateTime
  isArchived           Boolean  @default(false)

  @@id([id, type, softwareLabel, clientId, dateStart])
}

model Software_Setting {
  id            String
  label         String
  description   String?
  value         String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String
  softwareLabel String
  clientId      String
  slug          String   @unique @default(cuid())
  comment       String?
  Software      Software @relation(fields: [softwareLabel, clientId], references: [label, clientId], onDelete: Cascade)

  @@id([id, label, value, clientId, softwareLabel])
}

model Table_Seniority {
  id                  String
  label               String
  idcc                String
  url                 String?
  extended            Boolean               @default(false)
  isArchived          Boolean               @default(false)
  dateStart           DateTime
  dateEnd             DateTime?
  Idcc                Idcc                  @relation(fields: [idcc], references: [code])
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  createdBy           String                @default("system")
  slug                String                @unique
  Table_Seniority_Row Table_Seniority_Row[]

  @@id([id, idcc])
}

model Table_Seniority_Row {
  id              String
  label           String
  tableId         String
  idcc            String
  Table_Seniority Table_Seniority @relation(fields: [tableId, idcc], references: [id, idcc])
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  createdBy       String          @default("system")
  slug            String          @unique
  minMonth        Int
  maxMonth        Int
  pourcentage     Float
  coefficient     String?
  qualification   String?
  niveau          String?
  echelon         String?
  indice          String?

  @@id([id, tableId, idcc])
}

model Table_Keeping_Wage {
  id                     String
  type                   String                   @default("Maladie")
  label                  String
  url                    String?
  idcc                   String
  extended               Boolean                  @default(false)
  isArchived             Boolean                  @default(false)
  dateStart              DateTime
  dateEnd                DateTime?
  Idcc                   Idcc                     @relation(fields: [idcc], references: [code])
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  createdBy              String                   @default("system")
  slug                   String                   @unique
  Table_Keeping_Wage_Row Table_Keeping_Wage_Row[]

  @@id([id, idcc])
}

model Table_Keeping_Wage_Row {
  id                 String
  deficiency         Int
  label              String
  minMonth           Int
  maxMonth           Int
  pourcentage        Float
  numberOfDay        Int
  idcc               String
  Idcc               Idcc               @relation(fields: [idcc], references: [code])
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  createdBy          String             @default("system")
  slug               String             @unique
  Table_Keeping_Wage Table_Keeping_Wage @relation(fields: [tableId, idcc], references: [id, idcc])
  tableId            String

  @@id([id, idcc, tableId])
}

model Table_Wage {
  id             String
  label          String
  url            String?
  idcc           String
  extended       Boolean          @default(false)
  isArchived     Boolean          @default(false)
  dateStart      DateTime
  dateEnd        DateTime?
  Idcc           Idcc             @relation(fields: [idcc], references: [code])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  createdBy      String           @default("system")
  slug           String           @unique
  Table_Wage_Row Table_Wage_Row[]

  @@id([id, idcc])
}

model Table_Wage_Row {
  id            String
  label         String
  coefficient   String?
  qualification String?
  niveau        String?
  echelon       String?
  indice        String?
  position      String?
  value         String
  idcc          String
  Idcc          Idcc       @relation(fields: [idcc], references: [code])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  createdBy     String     @default("system")
  slug          String     @unique
  Table_Wage    Table_Wage @relation(fields: [tableId, idcc], references: [id, idcc])
  tableId       String

  @@id([id, idcc, tableId])
}

// Tables projects

model UserProject {
  userId               String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  createdBy            String
  isAdmin              Boolean  @default(false)
  isEditor             Boolean  @default(false)
  isValidator          Boolean  @default(false)
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project              Project  @relation(fields: [projectClientId, projectLabel, projectSoftwareLabel], references: [clientId, label, softwareLabel], onDelete: Cascade)
  projectClientId      String
  projectSoftwareLabel String
  projectLabel         String
  role                 String?
  isBlocked            Boolean  @default(false)

  @@id([userId, projectClientId, projectLabel, projectSoftwareLabel])
}

model Project_Attachment {
  clientId           String
  projectLabel       String
  softwareLabel      String
  url                String
  downloadUrl        String
  pathname           String
  contentType        String?
  contentDisposition String
  updatedAt          DateTime @updatedAt
  createdAt          DateTime @default(now())
  createdBy          String
  Project            Project  @relation(fields: [clientId, projectLabel, softwareLabel], references: [clientId, label, softwareLabel], onDelete: Cascade)

  @@id([clientId, softwareLabel, projectLabel, url])
}

model Project {
  clientId           String
  client             Client               @relation(fields: [clientId], references: [siren], onDelete: Cascade)
  logo               String?
  label              String
  description        String
  status             String               @default("Actif")
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  createdBy          String
  Software           Software             @relation(fields: [softwareLabel, clientId], references: [label, clientId], onDelete: Cascade)
  softwareLabel      String
  UserProject        UserProject[]
  Logger             Logger[]
  slug               String               @unique
  Project_DSN        Project_DSN[]
  Project_Attachment Project_Attachment[]
  Project_Invitation Project_Invitation[]
  Project_Page       Project_Page[]

  @@id([clientId, softwareLabel, label])
}

model Logger {
  id                   String   @id @default(cuid())
  level                String
  message              String
  scope                String
  createdAt            DateTime @default(now())
  createdBy            String
  isArchived           Boolean  @default(false)
  clientId             String?
  userId               String?
  client               Client?  @relation(fields: [clientId], references: [siren])
  project              Project? @relation(fields: [clientId, projectLabel, projectSoftwareLabel], references: [clientId, label, softwareLabel])
  user                 User?    @relation(fields: [userId], references: [id])
  projectSoftwareLabel String?
  projectLabel         String?
}

model Constant_Legal {
  id          String
  label       String
  description String?
  idccCode    String    @default("9999")
  Idcc        Idcc      @relation(fields: [idccCode], references: [code])
  value       String
  extended    Boolean   @default(false)
  dateStart   DateTime
  dateEnd     DateTime?
  isArchived  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   String
  slug        String    @unique
  sourceId    String?

  @@id([id, dateStart])
}

model Idcc {
  code                   String                   @id
  label                  String
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  createdBy              String                   @default("system")
  SoftwareItems          Software_Items[]
  ConstantLegal          Constant_Legal[]
  Classification         Classification[]
  Table_Seniority        Table_Seniority[]
  Table_Keeping_Wage     Table_Keeping_Wage[]
  Table_Keeping_Wage_Row Table_Keeping_Wage_Row[]
  Table_Wage             Table_Wage[]
  Table_Wage_Row         Table_Wage_Row[]
}

model Prisma_Seed {
  name          String   @id
  description   String
  order         Int
  status        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String
  previousLabel String
  error         String?
}

model Item {
  id                       String
  nature                   String
  label                    String?
  type                     String
  baseType                 String?
  base                     String?
  rateType                 String?
  rate                     String?
  coeffType                String?
  coeff                    String?
  amountType               String?
  amount                   String?
  employeeContributionType String?
  employerContributionType String?
  employerContribution     String?
  employeeContribution     String?
  comment                  String?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  createdBy                String

  @@id([id, type])
}

model Counter {
  id          String   @id
  label       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   @default("system")
  inHours     Boolean  @default(false)
  inDays      Boolean  @default(false)
  isArchived  Boolean  @default(false)
}

model Software_Counter {
  id            String
  label         String
  description   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String   @default("system")
  softwareLabel String
  clientId      String
  inHours       Boolean  @default(false)
  inDays        Boolean  @default(false)
  Software      Software @relation(fields: [softwareLabel, clientId], references: [label, clientId])
  isArchived    Boolean  @default(false)

  @@id([id, label, clientId, softwareLabel])
}

model Software_Profile {
  id            String
  label         String
  description   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String   @default("system")
  softwareLabel String
  clientId      String
  Software      Software @relation(fields: [softwareLabel, clientId], references: [label, clientId])
  isArchived    Boolean  @default(false)

  @@id([id, label, clientId, softwareLabel])
}

model Software_Absence {
  label            String
  id               String
  description      String?
  isSocialSecurity Boolean  @default(false)
  softwareLabel    String
  slug             String   @unique
  clientId         String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  createdBy        String   @default("system")
  dsnCode          String?
  dsnLabel         String?
  Software         Software @relation(fields: [softwareLabel, clientId], references: [label, clientId])
  methodOfCalcul   String
  population       String?
  itemHour         String?
  itemDay          String?
  counter          String?
  isPrintable      Boolean  @default(false)
  isArchived       Boolean  @default(false)

  @@id([label, id, clientId, softwareLabel])
}

model Default_Setting {
  id          String
  label       String
  description String?
  value       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   @default("system")

  @@id([id, label, value])
}

model Dsn_OPS {
  type     String
  id       String  @id
  label    String
  dsnId    String?
  address1 String?
  codeZip  String?
  city     String?
}

model Dsn_Absence {
  id        String   @id
  label     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   @default("system")
}

model Feedback {
  id         String   @id @default(cuid())
  feature    String
  message    String
  level      String
  isBlocked  Boolean  @default(false)
  isArchived Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  createdBy  String
}

model Project_DSN {
  projectLabel     String
  softwareLabel    String
  clientId         String
  dsnDate          String
  isApproved       Boolean            @default(false)
  isPending        Boolean            @default(false)
  isOpen           Boolean            @default(true)
  slug             String             @unique
  random           String
  dsnSiret         String
  Project          Project            @relation(fields: [clientId, projectLabel, softwareLabel], references: [clientId, label, softwareLabel])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  createdBy        String             @default("system")
  Project_DSN_Data Project_DSN_Data[]

  @@id([projectLabel, softwareLabel, clientId, dsnDate, dsnSiret])
}

model Project_DSN_Data {
  projectLabel  String
  softwareLabel String
  clientId      String
  id            String
  fraction      String
  value         String
  dsnDate       String
  dsnSiret      String
  label         String
  Project_DSN   Project_DSN @relation(fields: [projectLabel, softwareLabel, clientId, dsnDate, dsnSiret], references: [projectLabel, softwareLabel, clientId, dsnDate, dsnSiret])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  createdBy     String      @default("system")
  siret         String
  dsnId         String
  uuid          String      @default(cuid())

  @@id([projectLabel, softwareLabel, clientId, fraction, siret, dsnId, dsnDate, dsnSiret, uuid])
}

model Accumulation {
  id          String   @id
  label       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   @default("system")
}

model Software_Accumulation {
  id            String
  label         String
  description   String?
  clientId      String
  softwareLabel String
  Software      Software @relation(fields: [softwareLabel, clientId], references: [label, clientId])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String   @default("system")
  isArchived    Boolean  @default(false)
  slug          String   @unique

  @@id([id, label, clientId, softwareLabel])
}

model Classification {
  id        String
  type      String
  label     String
  url       String?
  idcc      String
  slug      String   @unique
  Idcc      Idcc     @relation(fields: [idcc], references: [code])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   @default("system")

  @@id([id, idcc, type])
}

model Dsn_Structure {
  id         String       @id
  label      String
  type       String
  Page_Block Page_Block[]
}

model Rate_At {
  id        String   @id
  label     String
  startDate String
  endDate   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   @default("system")
}

model Page {
  id            String         @default(cuid())
  internalId    String
  level         String
  label         String
  order         Int
  status        String         @default("En attente")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  createdBy     String         @default("system")
  slug          String         @unique
  version       Int
  clientId      String?
  softwareLabel String?
  Software      Software?      @relation(fields: [softwareLabel, clientId], references: [label, clientId])
  Page_Block    Page_Block[]
  Project_Page  Project_Page[]

  @@id([id, version])
}

model Page_Block {
  id                  String                @id @default(cuid())
  pageId              String
  pageVersion         Int
  level1              Boolean               @default(false)
  blockMasterId       String?
  block               Page_Block?           @relation("BlockChild", fields: [blockMasterId], references: [id])
  blocks              Page_Block[]          @relation("BlockChild")
  htmlElement         String
  type                String
  label               String
  options             String?               @default("")
  sourceDsnId         String?
  optionsFormId       String?
  optionsBlockId      String?
  Dsn_Stucture        Dsn_Structure?        @relation(fields: [sourceDsnId], references: [id])
  imageUrl            String?
  placeholder         String?
  buttonLabel         String?
  min                 Int                   @default(0)
  max                 Int                   @default(9999999)
  minLength           Int                   @default(1)
  maxLength           Int                   @default(255)
  typeInput           String                @default("text")
  required            Boolean               @default(false)
  readonly            Boolean               @default(false)
  order               Int
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  createdBy           String                @default("system")
  slug                String                @unique
  Page                Page                  @relation(fields: [pageId, pageVersion], references: [id, version])
  Project_Block_Value Project_Block_Value[]
  blockIdSource       String?

  @@unique([pageId, pageVersion, label])
}

model Project_Page {
  id                  String                @id @default(cuid())
  projectLabel        String
  softwareLabel       String
  clientId            String
  pageId              String
  label               String
  pageVersion         Int
  order               Int
  slug                String                @unique
  status              String                @default("En cours de r√©daction")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  createdBy           String                @default("system")
  Project             Project               @relation(fields: [clientId, projectLabel, softwareLabel], references: [clientId, label, softwareLabel])
  Page                Page                  @relation(fields: [pageId, pageVersion], references: [id, version])
  Project_Block_Value Project_Block_Value[]
  Page_Validation     Page_Validation[]
}

model Project_Block_Value {
  id            String       @id @default(cuid())
  projectLabel  String
  softwareLabel String
  clientId      String
  blockId       String
  formId        String
  projectPageId String
  Project_Page  Project_Page @relation(fields: [projectPageId], references: [id])
  label         String
  order         Int
  pageVersion   Int
  value         String
  formGroup     String
  readOnly      Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  createdBy     String       @default("system")
  Page_Block    Page_Block   @relation(fields: [blockId], references: [id])
}

model Page_Validation {
  projectPageId String
  Project_Page  Project_Page @relation(fields: [projectPageId], references: [id])
  userId        String
  User          User         @relation(fields: [userId], references: [id])
  response      String       @default("En attente")
  comment       String?
  deadline      DateTime     @default("4000-01-01T00:00:00Z")
  slug          String       @unique
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  createdBy     String       @default("system")

  @@id([projectPageId, userId])
}
