// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // uses connection pooling
  directUrl = env("DATABASE_URL_UNPOOLED") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String            @unique
  emailVerified   DateTime?
  image           String?
  username        String?
  accounts        Account[]
  sessions        Session[]
  UserOtherData   UserOtherData[]
  UserClient      UserClient[]
  UserProject     UserProject[]
  UserSoftware    UserSoftware[]
  Project_Task    Project_Task[]
  Project_Approve Project_Approve[]
}

model UserOtherData {
  userId     String   @id
  firstname  String?
  lastname   String?
  password   String?
  civility   String?
  cgv        Boolean  @default(false)
  gdpr       Boolean  @default(false)
  isBlocked  Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isInternal Boolean  @default(false)
  isSetup    Boolean  @default(false)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Client {
  slug                      String                      @unique
  socialReason              String
  dateStartTrial            DateTime?
  dateEndTrial              DateTime?
  siren                     String                      @id
  isBlocked                 Boolean
  invoiceStart              DateTime?
  invoiceEnd                DateTime?
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  createdBy                 String
  UserClient                UserClient[]
  Invitation                Invitation[]
  Software                  Software[]
  Project                   Project[]
  Logger                    Logger[]
  Client_Classification     Client_Classification[]
  Client_Task               Client_Task[]
  Client_API                Client_API[]
  Client_Constant_Legal     Client_Constant_Legal[]
  Client_Table_Seniority    Client_Table_Seniority[]
  Client_Table_Age          Client_Table_Age[]
  Client_Table_Keeping_Wage Client_Table_Keeping_Wage[]
  Client_Table_Wage         Client_Table_Wage[]
  Processus                 Processus[]
  Form                      Form[]
  Form_Input                Form_Input[]
}

model Client_API {
  clientId            String
  label               String
  limit               Int
  apiKey              String                @unique
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  createdBy           String                @default("system")
  client              Client                @relation(fields: [clientId], references: [siren], onDelete: Cascade)
  slug                String                @unique
  Client_API_Activity Client_API_Activity[]
  revoked             Boolean               @default(false)
  uuid                String                @default(cuid())

  @@id([clientId, uuid])
}

model Client_API_Activity {
  clientId   String
  uuidApi    String
  pathname   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  createdBy  String     @default("system")
  Client_API Client_API @relation(fields: [clientId, uuidApi], references: [clientId, uuid], onDelete: Cascade)

  @@id([clientId, uuidApi, pathname, createdAt])
}

model UserClient {
  userId          String
  clientId        String
  isBlocked       Boolean
  isBillable      Boolean
  defaultRole     String
  isAdministrator Boolean  @default(false)
  isEditor        Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isActivated     Boolean  @default(false)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  client          Client   @relation(fields: [clientId], references: [siren], onDelete: Cascade)

  @@id([userId, clientId])
}

model Invitation {
  email                  String   @unique
  sendEmail              Boolean
  civility               String
  firstname              String
  defaultRole            String?
  lastname               String
  isBlocked              Boolean  @default(false)
  isBillable             Boolean  @default(false)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  createdBy              String
  isEditorProject        Boolean  @default(false)
  isAdministratorProject Boolean  @default(false)
  isValidatorProject     Boolean  @default(false)
  isInternal             Boolean  @default(false)
  clientId               String
  client                 Client   @relation(fields: [clientId], references: [siren], onDelete: Cascade)
  softwareLabel          String
  Software               Software @relation(fields: [softwareLabel, clientId], references: [label, clientId], onDelete: Cascade)
  projectLabel           String?
  projectSoftwareLabel   String?
  isAdministratorClient  Boolean  @default(false)
  isEditorClient         Boolean  @default(false)
  source                 String
  isArchived             Boolean  @default(false)

  @@id([email, clientId])
}

model Project_Invitation {
  projectLabel         String
  projectSoftwareLabel String
  clientId             String
  Project              Project  @relation(fields: [clientId, projectLabel, projectSoftwareLabel], references: [clientId, label, softwareLabel], onDelete: Cascade)
  email                String
  isAdministrator      Boolean  @default(false)
  isEditor             Boolean  @default(false)
  isValidator          Boolean  @default(false)
  createdAt            DateTime @default(now())
  createdBy            String
  updatedAt            DateTime @updatedAt

  @@id([projectLabel, projectSoftwareLabel, clientId, email])
}

model Software {
  label                                      String
  slug                                       String                        @unique
  createdAt                                  DateTime                      @default(now())
  updatedAt                                  DateTime                      @updatedAt
  createdBy                                  String
  clientId                                   String
  client                                     Client                        @relation(fields: [clientId], references: [siren], onDelete: Cascade)
  SoftwareItems                              Software_Items[]
  UserSoftware                               UserSoftware[]
  Software_Setting                           Software_Setting[]
  Project                                    Project[]
  Software_Task                              Software_Task[]
  Software_Absence                           Software_Absence[]
  Software_Constant_Legal                    Software_Constant_Legal[]
  Software_Counter                           Software_Counter[]
  Software_Profile                           Software_Profile[]
  isArchived                                 Boolean                       @default(false)
  Software_Accumulation                      Software_Accumulation[]
  Invitation                                 Invitation[]
  Software_Classification                    Software_Classification[]
  Software_TableSoftware_Table_Seniority_Age Software_Table_Seniority[]
  Software_Table_Age                         Software_Table_Age[]
  Software_Table_Keeping_Wage                Software_Table_Keeping_Wage[]
  Software_Table_Wage                        Software_Table_Wage[]
  Processus                                  Processus[]
  Form                                       Form[]
  Form_Input                                 Form_Input[]

  @@id([label, clientId])
}

model UserSoftware {
  userId           String
  createdAt        DateTime @default(now())
  isEditor         Boolean  @default(false)
  updatedAt        DateTime @updatedAt
  createdBy        String   @default("system")
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  software         Software @relation(fields: [softwareLabel, softwareClientId], references: [label, clientId], onDelete: Cascade)
  softwareLabel    String
  softwareClientId String
  isActivated      Boolean  @default(false)

  @@id([userId, softwareLabel, softwareClientId])
}

// Tables editor

model Software_Items {
  id                   String // id de l'item standard ou id du logiciel si cr√©ation par l'utilisateur
  idSoftware           String? // id du logiciel
  slug                 String   @unique
  software             Software @relation(fields: [softwareLabel, clientId], references: [label, clientId], onDelete: Cascade)
  softwareLabel        String
  clientId             String
  type                 String
  label                String
  description          String
  idccCode             String
  Idcc                 Idcc?    @relation(fields: [idccCode], references: [code])
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  createdBy            String
  base                 String?
  rate                 String?
  amount               String?
  status               String?
  employeeContribution String?
  employerContribution String?
  dateStart            DateTime
  isArchived           Boolean  @default(false)

  @@id([id, type, softwareLabel, clientId, dateStart])
}

model Software_Setting {
  id            String
  label         String
  description   String?
  value         String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String
  softwareLabel String
  clientId      String
  slug          String   @unique
  comment       String?
  Software      Software @relation(fields: [softwareLabel, clientId], references: [label, clientId], onDelete: Cascade)

  @@id([id, label, value, clientId, softwareLabel])
}

model Table_Seniority {
  level               String                @default("Standard")
  id                  String
  label               String
  idcc                String
  Idcc                Idcc                  @relation(fields: [idcc], references: [code])
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  createdBy           String                @default("system")
  slug                String                @unique
  Table_Seniority_Row Table_Seniority_Row[]

  @@id([id, idcc])
}

model Client_Table_Seniority {
  level                      String                       @default("client")
  id                         String
  label                      String
  idcc                       String
  clientId                   String
  Client                     Client                       @relation(fields: [clientId], references: [siren])
  Idcc                       Idcc                         @relation(fields: [idcc], references: [code])
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  createdBy                  String                       @default("system")
  slug                       String                       @unique
  Client_Table_Seniority_Row Client_Table_Seniority_Row[]

  @@id([id, idcc, clientId])
}

model Software_Table_Seniority {
  level                        String                         @default("logiciel")
  id                           String
  label                        String
  idcc                         String
  clientId                     String
  softwareLabel                String
  Software                     Software                       @relation(fields: [softwareLabel, clientId], references: [label, clientId])
  Idcc                         Idcc                           @relation(fields: [idcc], references: [code])
  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime                       @updatedAt
  createdBy                    String                         @default("system")
  slug                         String                         @unique
  Software_Table_Seniority_Row Software_Table_Seniority_Row[]

  @@id([id, idcc, clientId, softwareLabel])
}

model Software_Table_Seniority_Row {
  level                    String                   @default("logiciel")
  id                       String
  label                    String
  tableId                  String
  idcc                     String
  clientId                 String
  softwareLabel            String
  Software_Table_Seniority Software_Table_Seniority @relation(fields: [tableId, clientId, idcc, softwareLabel], references: [id, clientId, idcc, softwareLabel])
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @updatedAt
  createdBy                String                   @default("system")
  slug                     String                   @unique
  minMonth                 Int
  maxMonth                 Int
  pourcentage              Float
  coefficient              String?
  qualification            String?
  niveau                   String?
  echelon                  String?
  indice                   String?

  @@id([id, tableId, idcc, softwareLabel])
}

model Client_Table_Seniority_Row {
  level                  String                 @default("client")
  id                     String
  label                  String
  tableId                String
  idcc                   String
  clientId               String
  Client_Table_Seniority Client_Table_Seniority @relation(fields: [tableId, clientId, idcc], references: [id, clientId, idcc])
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  createdBy              String                 @default("system")
  slug                   String                 @unique
  minMonth               Int
  maxMonth               Int
  pourcentage            Float
  coefficient            String?
  qualification          String?
  niveau                 String?
  echelon                String?
  indice                 String?

  @@id([id, tableId, idcc])
}

model Table_Seniority_Row {
  level           String          @default("Standard")
  order           String
  label           String
  tableId         String
  idcc            String
  Table_Seniority Table_Seniority @relation(fields: [tableId, idcc], references: [id, idcc])
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  createdBy       String          @default("system")
  slug            String          @unique
  minMonth        Int
  maxMonth        Int
  pourcentage     Float
  coefficient     String?
  qualification   String?
  niveau          String?
  echelon         String?
  indice          String?

  @@id([order, tableId, idcc])
}

model Table_Age {
  level         String          @default("Standard")
  id            String
  label         String
  idcc          String
  Idcc          Idcc            @relation(fields: [idcc], references: [code])
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  createdBy     String          @default("system")
  slug          String          @unique
  Table_Age_Row Table_Age_Row[]

  @@id([id, idcc])
}

model Table_Age_Row {
  level       String     @default("Standard")
  id          String
  label       String
  age         Int
  schoolYear  Int
  minMonth    Int
  pourcentage Float
  maxMonth    Int
  idcc        String
  Idcc        Idcc       @relation(fields: [idcc], references: [code])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdBy   String     @default("system")
  slug        String     @unique
  Table_Age   Table_Age? @relation(fields: [tableId, idcc], references: [id, idcc])
  tableId     String

  @@id([id, idcc, tableId])
}

model Client_Table_Age {
  level                String                 @default("client")
  id                   String
  label                String
  clientId             String
  Client               Client                 @relation(fields: [clientId], references: [siren])
  idcc                 String
  Idcc                 Idcc                   @relation(fields: [idcc], references: [code])
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  createdBy            String                 @default("system")
  slug                 String                 @unique
  Client_Table_Age_Row Client_Table_Age_Row[]

  @@id([id, idcc, clientId])
}

model Client_Table_Age_Row {
  level            String           @default("client")
  id               String
  label            String
  age              Int
  schoolYear       Int
  minMonth         Int
  maxMonth         Int
  pourcentage      Float
  idcc             String
  clientId         String
  Idcc             Idcc             @relation(fields: [idcc], references: [code])
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  createdBy        String           @default("system")
  slug             String           @unique
  Client_Table_Age Client_Table_Age @relation(fields: [tableId, idcc, clientId], references: [id, idcc, clientId])
  tableId          String

  @@id([id, idcc, tableId, clientId])
}

model Software_Table_Age {
  level                  String                   @default("logiciel")
  id                     String
  softwareLabel          String
  label                  String
  clientId               String
  Software               Software                 @relation(fields: [softwareLabel, clientId], references: [label, clientId])
  idcc                   String
  Idcc                   Idcc                     @relation(fields: [idcc], references: [code])
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  createdBy              String                   @default("system")
  slug                   String                   @unique
  Software_Table_Age_Row Software_Table_Age_Row[]

  @@id([id, idcc, clientId, softwareLabel])
}

model Software_Table_Age_Row {
  level              String              @default("logiciel")
  id                 String
  label              String
  age                Int
  schoolYear         Int
  minMonth           Int
  maxMonth           Int
  idcc               String
  pourcentage        Float
  softwareLabel      String
  clientId           String
  Idcc               Idcc                @relation(fields: [idcc], references: [code])
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  createdBy          String              @default("system")
  slug               String              @unique
  Software_Table_Age Software_Table_Age? @relation(fields: [tableId, idcc, clientId, softwareLabel], references: [id, idcc, clientId, softwareLabel])
  tableId            String

  @@id([id, idcc, tableId, clientId, softwareLabel])
}

model Table_Keeping_Wage {
  level                  String                   @default("Standard")
  id                     String
  label                  String
  idcc                   String
  Idcc                   Idcc                     @relation(fields: [idcc], references: [code])
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  createdBy              String                   @default("system")
  slug                   String                   @unique
  Table_Keeping_Wage_Row Table_Keeping_Wage_Row[]

  @@id([id, idcc])
}

model Table_Keeping_Wage_Row {
  level              String             @default("Standard")
  id                 String
  label              String
  age                Int?
  population         String?
  deficiency         Int
  minMonth           Int
  maxMonth           Int
  pourcentage        Float
  numberOfDay        Int
  idcc               String
  Idcc               Idcc               @relation(fields: [idcc], references: [code])
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  createdBy          String             @default("system")
  slug               String             @unique
  Table_Keeping_Wage Table_Keeping_Wage @relation(fields: [tableId, idcc], references: [id, idcc])
  tableId            String

  @@id([id, idcc, tableId])
}

model Client_Table_Keeping_Wage {
  level                         String                          @default("client")
  id                            String
  label                         String
  clientId                      String
  Client                        Client                          @relation(fields: [clientId], references: [siren])
  idcc                          String
  Idcc                          Idcc                            @relation(fields: [idcc], references: [code])
  createdAt                     DateTime                        @default(now())
  updatedAt                     DateTime                        @updatedAt
  createdBy                     String                          @default("system")
  slug                          String                          @unique
  Client_Table_Keeping_Wage_Row Client_Table_Keeping_Wage_Row[]

  @@id([id, idcc, clientId])
}

model Client_Table_Keeping_Wage_Row {
  level                     String                    @default("client")
  id                        String
  label                     String
  age                       Int?
  population                String?
  deficiency                Int
  minMonth                  Int
  clientId                  String
  maxMonth                  Int
  pourcentage               Float
  numberOfDay               Int
  idcc                      String
  Idcc                      Idcc                      @relation(fields: [idcc], references: [code])
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt
  createdBy                 String                    @default("system")
  slug                      String                    @unique
  Client_Table_Keeping_Wage Client_Table_Keeping_Wage @relation(fields: [tableId, idcc, clientId], references: [id, idcc, clientId])
  tableId                   String

  @@id([id, idcc, tableId, clientId])
}

model Software_Table_Keeping_Wage {
  level                           String                            @default("client")
  id                              String
  label                           String
  clientId                        String
  softwareLabel                   String
  Software                        Software                          @relation(fields: [softwareLabel, clientId], references: [label, clientId])
  idcc                            String
  Idcc                            Idcc                              @relation(fields: [idcc], references: [code])
  createdAt                       DateTime                          @default(now())
  updatedAt                       DateTime                          @updatedAt
  createdBy                       String                            @default("system")
  slug                            String                            @unique
  Software_Table_Keeping_Wage_Row Software_Table_Keeping_Wage_Row[]

  @@id([id, idcc, clientId, softwareLabel])
}

model Software_Table_Keeping_Wage_Row {
  level                       String                      @default("client")
  id                          String
  label                       String
  age                         Int?
  population                  String?
  deficiency                  Int
  minMonth                    Int
  clientId                    String
  maxMonth                    Int
  pourcentage                 Float
  numberOfDay                 Int
  sofwateLabel                String
  idcc                        String
  Idcc                        Idcc                        @relation(fields: [idcc], references: [code])
  createdAt                   DateTime                    @default(now())
  updatedAt                   DateTime                    @updatedAt
  createdBy                   String                      @default("system")
  slug                        String                      @unique
  Software_Table_Keeping_Wage Software_Table_Keeping_Wage @relation(fields: [tableId, idcc, clientId, sofwateLabel], references: [id, idcc, clientId, softwareLabel])
  tableId                     String

  @@id([id, idcc, tableId, clientId, sofwateLabel])
}

model Table_Wage {
  level          String           @default("Standard")
  id             String
  label          String
  idcc           String
  Idcc           Idcc             @relation(fields: [idcc], references: [code])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  createdBy      String           @default("system")
  slug           String           @unique
  Table_Wage_Row Table_Wage_Row[]

  @@id([id, idcc])
}

model Table_Wage_Row {
  level      String     @default("Standard")
  id         String
  label      String
  age        Int?
  population String?
  minMonth   Int
  maxMonth   Int
  value      String
  idcc       String
  Idcc       Idcc       @relation(fields: [idcc], references: [code])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  createdBy  String     @default("system")
  slug       String     @unique
  Table_Wage Table_Wage @relation(fields: [tableId, idcc], references: [id, idcc])
  tableId    String

  @@id([id, idcc, tableId])
}

model Client_Table_Wage {
  level                 String                  @default("client")
  id                    String
  label                 String
  clientId              String
  Client                Client                  @relation(fields: [clientId], references: [siren])
  idcc                  String
  Idcc                  Idcc                    @relation(fields: [idcc], references: [code])
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  createdBy             String                  @default("system")
  slug                  String                  @unique
  Client_Table_Wage_Row Client_Table_Wage_Row[]

  @@id([id, idcc, clientId])
}

model Client_Table_Wage_Row {
  level             String            @default("client")
  id                String
  label             String
  age               Int?
  population        String?
  minMonth          Int
  clientId          String
  maxMonth          Int
  value             String
  idcc              String
  Idcc              Idcc              @relation(fields: [idcc], references: [code])
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  createdBy         String            @default("system")
  slug              String            @unique
  Client_Table_Wage Client_Table_Wage @relation(fields: [tableId, idcc, clientId], references: [id, idcc, clientId])
  tableId           String

  @@id([id, idcc, tableId, clientId])
}

model Software_Table_Wage {
  level                   String                    @default("logiciel")
  id                      String
  clientId                String
  label                   String
  softwareLabel           String
  Software                Software                  @relation(fields: [clientId, softwareLabel], references: [clientId, label])
  idcc                    String
  Idcc                    Idcc                      @relation(fields: [idcc], references: [code])
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  createdBy               String                    @default("system")
  slug                    String                    @unique
  Software_Table_Wage_Row Software_Table_Wage_Row[]

  @@id([id, idcc, clientId, softwareLabel])
}

model Software_Table_Wage_Row {
  level               String              @default("logiciel")
  id                  String
  label               String
  age                 Int?
  population          String?
  minMonth            Int
  clientId            String
  tableId             String
  softwareLabel       String
  maxMonth            Int
  value               String
  idcc                String
  Idcc                Idcc                @relation(fields: [idcc], references: [code])
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  createdBy           String              @default("system")
  slug                String              @unique
  Software_Table_Wage Software_Table_Wage @relation(fields: [tableId, idcc, clientId, softwareLabel], references: [id, idcc, clientId, softwareLabel])

  @@id([id, idcc, tableId, clientId, softwareLabel])
}

// Tables projects

model UserProject {
  userId               String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  createdBy            String
  isAdmin              Boolean  @default(false)
  isEditor             Boolean  @default(false)
  isValidator          Boolean  @default(false)
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project              Project  @relation(fields: [projectClientId, projectLabel, projectSoftwareLabel], references: [clientId, label, softwareLabel], onDelete: Cascade)
  projectClientId      String
  projectSoftwareLabel String
  projectLabel         String
  team                 String
  role                 String?
  isBlocked            Boolean  @default(false)

  @@id([userId, projectClientId, projectLabel, projectSoftwareLabel])
}

model Project {
  clientId                String
  client                  Client                    @relation(fields: [clientId], references: [siren], onDelete: Cascade)
  logo                    String?
  label                   String
  description             String
  status                  String                    @default("actif")
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  createdBy               String
  Software                Software                  @relation(fields: [softwareLabel, clientId], references: [label, clientId], onDelete: Cascade)
  softwareLabel           String
  UserProject             UserProject[]
  Logger                  Logger[]
  Project_Attachment      Project_Attachment[]
  slug                    String                    @unique
  Project_Constant        Project_Constant[]
  Project_Items           Project_Items[]
  Project_Task            Project_Task[]
  Project_Invitation      Project_Invitation[]
  Project_Society         Project_Society[]
  Project_Job             Project_Job[]
  Project_Form            Project_Form[]
  Project_DSN             Project_DSN[]
  Project_Approve         Project_Approve[]
  Project_Processus_Order Project_Processus_Order[]
  Project_Absence         Project_Absence[]
  Project_Payrool_Item    Project_Payrool_Item[]

  @@id([clientId, softwareLabel, label])
}

model Project_Society {
  slug                  String                  @unique
  id                    String                  @default("En attente")
  siren                 String
  ape                   String
  socialReason          String                  @default("En attente")
  address1              String
  address2              String?                 @default("")
  address3              String?                 @default("")
  address4              String?                 @default("")
  status                String                  @default("En cours")
  source                String                  @default("analyse")
  postalCode            String
  city                  String
  clientId              String
  country               String                  @default("France")
  softwareLabel         String
  description           String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  createdBy             String                  @default("system")
  project               Project                 @relation(fields: [clientId, softwareLabel, projectLabel], references: [clientId, softwareLabel, label])
  projectLabel          String
  Project_Establishment Project_Establishment[]
  Project_Idcc          Project_Idcc[]
  Project_Job           Project_Job[]
  Project_Absence       Project_Absence[]
  Project_Payrool_Item  Project_Payrool_Item[]

  @@id([clientId, softwareLabel, projectLabel, siren])
}

model Project_Payrool_Item {
  id                             String
  label                          String
  type                           String
  description                    String
  population                     String?
  idcc                           String?
  example1                       String?
  example2                       String?
  example3                       String?
  example4                       String?
  example5                       String?
  clientId                       String
  societyId                      String
  Project_Society                Project_Society? @relation(fields: [projectLabel, softwareLabel, clientId, societyId], references: [projectLabel, softwareLabel, clientId, siren])
  softwareLabel                  String
  base                           String?
  baseDetail                     String?
  rate                           String?
  rateDetail                     String?
  coefficient                    String?
  coefficientDetail              String?
  amount                         String?
  amountDetail                   String?
  contributionBase               String?
  contributionBaseDetail         String?
  contributionRateEmployee       String?
  contributionRateEmployeeDetail String?
  contributionRateEmployerDetail String?
  contributionRateEmployer       String?
  projectLabel                   String
  Project                        Project          @relation(fields: [clientId, softwareLabel, projectLabel], references: [clientId, label, softwareLabel])
  createdAt                      DateTime         @default(now())
  updatedAt                      DateTime         @updatedAt
  createdBy                      String           @default("system")

  @@id([id, clientId, softwareLabel, projectLabel])
}

model Project_Absence {
  id               String
  label            String
  dsnId            String?
  method           String
  population       String?
  description      String?
  clientId         String
  slug             String           @unique
  status           String           @default("En cours")
  settlement       String
  projectLabel     String
  isSocialSecurity Boolean          @default(false)
  softwareLabel    String
  Project          Project          @relation(fields: [clientId, softwareLabel, projectLabel], references: [clientId, label, softwareLabel])
  source           String           @default("analyse")
  societyId        String?
  Project_Society  Project_Society? @relation(fields: [projectLabel, softwareLabel, clientId, societyId], references: [projectLabel, softwareLabel, clientId, siren])
  updatedAt        DateTime         @updatedAt
  createdAt        DateTime         @default(now())
  createdBy        String           @default("system")

  @@id([id, clientId, softwareLabel, projectLabel])
}

model Project_Establishment {
  slug                       String                       @unique
  id                         String                       @default("En attente")
  nic                        String
  ape                        String
  legalStatus                String
  address1                   String
  socialReason               String                       @default("En attente")
  address2                   String?                      @default("")
  address3                   String?                      @default("")
  address4                   String?                      @default("")
  postalCode                 String
  status                     String                       @default("En cours")
  source                     String                       @default("analyse")
  city                       String
  clientId                   String
  softwareLabel              String
  country                    String                       @default("France")
  description                String?                      @default("")
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  createdBy                  String                       @default("system")
  projectLabel               String
  societyId                  String
  Project_Society            Project_Society              @relation(fields: [clientId, softwareLabel, societyId, projectLabel], references: [clientId, softwareLabel, siren, projectLabel])
  Projet_OPS                 Projet_OPS[]
  Project_Paid_Leave         Project_Paid_Leave[]
  Project_Rate_AT            Project_Rate_AT[]
  Project_Establishment_Idcc Project_Establishment_Idcc[]
  Project_OPS                Project_OPS[]

  @@id([clientId, softwareLabel, societyId, projectLabel, nic])
}

model Project_Establishment_Idcc {
  clientId              String
  softwareLabel         String
  isFinished            Boolean               @default(false)
  isApproved            Boolean               @default(false)
  source                String                @default("analyse")
  projectLabel          String
  societyId             String
  establishmentNic      String
  isStandby             Boolean               @default(false)
  idcc                  String
  Project_Idcc          Project_Idcc          @relation(fields: [idcc, clientId, softwareLabel, projectLabel, societyId], references: [idcc, clientId, softwareLabel, projectLabel, societyId])
  Project_Establishment Project_Establishment @relation(fields: [establishmentNic, clientId, softwareLabel, projectLabel, societyId], references: [nic, clientId, softwareLabel, projectLabel, societyId])

  @@id([idcc, clientId, softwareLabel, projectLabel, societyId, establishmentNic])
}

model Project_Rate_AT {
  id                    String
  clientId              String
  source                String                @default("analyse")
  label                 String
  societyId             String
  softwareLabel         String
  status                String                @default("En cours")
  projectLabel          String
  startDate             DateTime?
  endDate               DateTime?
  isStandby             Boolean               @default(false)
  rate                  String
  slug                  String                @unique
  order                 Int?
  office                Boolean               @default(false)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  createdBy             String                @default("system")
  establishmentNic      String
  Project_Establishment Project_Establishment @relation(fields: [establishmentNic, clientId, softwareLabel, projectLabel, societyId], references: [nic, clientId, softwareLabel, projectLabel, societyId])

  @@id([id, clientId, societyId, establishmentNic, softwareLabel, projectLabel])
}

model Project_OPS {
  clientId              String
  softwareLabel         String
  projectLabel          String
  id                    String?
  establishmentNic      String
  slug                  String                @unique
  type                  String
  societyId             String
  status                String                @default("En cours")
  source                String                @default("analyse")
  label                 String
  address1              String
  address2              String?
  address3              String?
  address4              String?
  postalCode            String
  city                  String
  country               String
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  createdBy             String
  Project_Establishment Project_Establishment @relation(fields: [establishmentNic, clientId, softwareLabel, projectLabel, societyId], references: [nic, clientId, softwareLabel, projectLabel, societyId])

  @@id([clientId, softwareLabel, projectLabel, establishmentNic, type])
}

model Project_Idcc {
  idcc                       String
  label                      String
  clientId                   String
  slug                       String                       @unique
  softwareLabel              String
  status                     String                       @default("En cours")
  source                     String                       @default("analyse")
  projectLabel               String
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  createdBy                  String                       @default("system")
  societyId                  String
  Project_Society            Project_Society              @relation(fields: [clientId, softwareLabel, projectLabel, societyId], references: [clientId, softwareLabel, projectLabel, siren])
  Project_Classification     Project_Classification[]
  Project_Establishment_Idcc Project_Establishment_Idcc[]

  @@id([idcc, clientId, softwareLabel, projectLabel, societyId])
}

model Project_Classification {
  level         String       @default("Logiciel")
  id            String
  projectLabel  String
  type          String
  slug          String       @unique
  label         String
  societyId     String
  status        String       @default("En cours")
  source        String       @default("analyse")
  description   String?
  idcc          String
  clientId      String
  softwareLabel String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  createdBy     String       @default("system")
  Project_Idcc  Project_Idcc @relation(fields: [idcc, clientId, softwareLabel, projectLabel, societyId], references: [idcc, clientId, softwareLabel, projectLabel, societyId])

  @@id([id, idcc, projectLabel, type, clientId, softwareLabel, societyId])
}

model Project_Paid_Leave {
  slug                  String                @unique
  establishmentNic      String
  clientId              String
  softwareLabel         String
  societyId             String
  status                String                @default("En cours")
  source                String                @default("analyse")
  projectLabel          String
  periodEndDate         String
  method                String
  valuationLeave        String
  roudingMethod         String
  roudingMethodLeave    String
  valuation             String
  tableSeniority        String?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  createdBy             String
  Project_Establishment Project_Establishment @relation(fields: [establishmentNic, clientId, softwareLabel, societyId, projectLabel], references: [nic, clientId, softwareLabel, societyId, projectLabel])

  @@id([establishmentNic, societyId, clientId, softwareLabel, projectLabel])
}

model Project_Job {
  slug            String           @unique
  id              String           @default("En attente")
  label           String
  description     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  createdBy       String           @default("system")
  societyId       String?
  Project_Society Project_Society? @relation(fields: [clientId, projectLabel, softwareLabel, societyId], references: [clientId, projectLabel, softwareLabel, siren])
  clientId        String
  status          String           @default("En cours")
  source          String           @default("analyse")
  projectLabel    String
  softwareLabel   String
  Project         Project          @relation(fields: [clientId, projectLabel, softwareLabel], references: [clientId, label, softwareLabel])

  @@id([clientId, softwareLabel, projectLabel, label])
}

model Projet_OPS {
  slug                  String                @unique
  id                    String
  clientId              String
  projectLabel          String
  softwareLabel         String
  isFinished            Boolean               @default(false)
  isApproved            Boolean               @default(false)
  source                String                @default("analyse")
  label                 String
  type                  String
  address               String
  societyId             String
  address2              String?
  address3              String?
  address4              String?
  postalCode            String
  city                  String
  country               String
  establishmentNic      String
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  createdBy             String
  Project_Establishment Project_Establishment @relation(fields: [clientId, softwareLabel, projectLabel, establishmentNic, societyId], references: [clientId, softwareLabel, projectLabel, nic, societyId])

  @@id([id, clientId, societyId, softwareLabel, establishmentNic, projectLabel])
}

model Logger {
  id                   String   @id @default(cuid())
  level                String
  message              String
  scope                String
  createdAt            DateTime @default(now())
  createdBy            String
  isArchived           Boolean  @default(false)
  clientId             String?
  userId               String?
  client               Client?  @relation(fields: [clientId], references: [siren])
  project              Project? @relation(fields: [clientId, projectLabel, projectSoftwareLabel], references: [clientId, label, softwareLabel])
  projectSoftwareLabel String?
  projectLabel         String?
}

model Project_Items {
  id                   String
  project              Project  @relation(fields: [projectLabel, projectSoftwareLabel, clientId], references: [label, softwareLabel, clientId], onDelete: Cascade)
  projectLabel         String
  projectSoftwareLabel String
  clientId             String
  type                 String
  label                String
  description          String
  idccCode             String
  Idcc                 Idcc?    @relation(fields: [idccCode], references: [code])
  version              Int
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  createdBy            String
  base                 String
  rate                 String
  amount               String
  status               String
  employeeContribution String
  employerContribution String

  @@id([id, type, projectLabel, projectSoftwareLabel, clientId, version])
}

model Constant_Legal {
  id            String
  level         String   @default("Standard")
  label         String
  description   String?
  idccCode      String   @default("9999")
  Idcc          Idcc?    @relation(fields: [idccCode], references: [code])
  value         String
  dateStart     String
  softwareLabel String?
  clientId      String?
  projectLabel  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String
  slug          String   @unique
  sourceId      String?

  @@id([id, level, dateStart])
}

model Client_Constant_Legal {
  id            String
  level         String   @default("Client")
  label         String
  clientId      String
  description   String?
  idccCode      String   @default("9999")
  Idcc          Idcc?    @relation(fields: [idccCode], references: [code])
  Client        Client   @relation(fields: [clientId], references: [siren], onDelete: Cascade)
  value         String
  dateStart     String
  softwareLabel String?
  projectLabel  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String
  slug          String   @unique
  sourceId      String?

  @@id([id, level, dateStart, clientId])
}

model Software_Constant_Legal {
  id            String
  level         String   @default("Logiciel")
  label         String
  description   String?
  idccCode      String   @default("9999")
  Idcc          Idcc?    @relation(fields: [idccCode], references: [code])
  value         String
  dateStart     String
  softwareLabel String
  clientId      String
  software      Software @relation(fields: [softwareLabel, clientId], references: [label, clientId], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String
  slug          String   @unique
  isArchived    Boolean  @default(false)

  @@id([id, level, dateStart, clientId, softwareLabel])
}

model Project_Constant {
  code                 String
  level                String   @default("Projet")
  label                String
  description          String
  idccCode             String
  Idcc                 Idcc?    @relation(fields: [idccCode], references: [code])
  value                String
  dateStart            String
  projectLabel         String
  projectSoftwareLabel String
  clientId             String
  Project              Project  @relation(fields: [clientId, projectLabel, projectSoftwareLabel], references: [clientId, label, softwareLabel], onDelete: Cascade)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  createdBy            String

  @@id([code, dateStart, projectLabel, projectSoftwareLabel, clientId])
}

model Idcc {
  code                            String                            @id
  label                           String
  createdAt                       DateTime                          @default(now())
  updatedAt                       DateTime                          @updatedAt
  createdBy                       String                            @default("system")
  SoftwareItems                   Software_Items[]
  ConstantLegal                   Constant_Legal[]
  ProjectConstant                 Project_Constant[]
  Project_Items                   Project_Items[]
  Software_Constant_Legal         Software_Constant_Legal[]
  Classification                  Classification[]
  Client_Classification           Client_Classification[]
  Software_Classification         Software_Classification[]
  Client_Constant_Legal           Client_Constant_Legal[]
  Table_Seniority                 Table_Seniority[]
  Client_Table_Seniority          Client_Table_Seniority[]
  Software_Table_Seniority        Software_Table_Seniority[]
  Table_Age                       Table_Age[]
  Table_Age_Row                   Table_Age_Row[]
  Client_Table_Age                Client_Table_Age[]
  Client_Table_Age_Row            Client_Table_Age_Row[]
  Software_Table_Age              Software_Table_Age[]
  Software_Table_Age_Row          Software_Table_Age_Row[]
  Table_Keeping_Wage              Table_Keeping_Wage[]
  Table_Keeping_Wage_Row          Table_Keeping_Wage_Row[]
  Client_Table_Keeping_Wage       Client_Table_Keeping_Wage[]
  Client_Table_Keeping_Wage_Row   Client_Table_Keeping_Wage_Row[]
  Software_Table_Keeping_Wage     Software_Table_Keeping_Wage[]
  Software_Table_Keeping_Wage_Row Software_Table_Keeping_Wage_Row[]
  Table_Wage                      Table_Wage[]
  Table_Wage_Row                  Table_Wage_Row[]
  Client_Table_Wage               Client_Table_Wage[]
  Client_Table_Wage_Row           Client_Table_Wage_Row[]
  Software_Table_Wage             Software_Table_Wage[]
  Software_Table_Wage_Row         Software_Table_Wage_Row[]
}

model Project_Attachment {
  label                String
  description          String
  slug                 String   @unique
  isObligatory         Boolean
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  createdBy            String
  project              Project  @relation(fields: [clientId, projectLabel, projectSoftwareLabel], references: [clientId, label, softwareLabel])
  projectLabel         String
  projectSoftwareLabel String
  clientId             String
  deliveryDeadline     DateTime @default(now())
  accept               String   @default("pdf")
  multiple             Boolean  @default(false)
  url                  String?
  isDelivered          Boolean  @default(false)

  @@id([label, projectLabel, clientId])
}

model Processus {
  id              String          @id
  label           String
  level           String          @default("Standard")
  description     String?
  theme           String
  table           String
  clientId        String?
  softwareLabel   String?
  Client          Client?         @relation(fields: [clientId], references: [siren])
  Software        Software?       @relation(fields: [softwareLabel, clientId], references: [label, clientId])
  slug            String          @unique
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  createdBy       String          @default("system")
  isArchived      Boolean         @default(false)
  isDuplicate     Boolean         @default(false)
  idOrigin        String?
  Form            Form[]
  Processus_Order Processus_Order @relation(fields: [orderId], references: [id])
  orderId         String
}

model Project_Processus {
  id                      String
  clientId                String
  label                   String
  table                   String
  description             String?
  projectLabel            String
  softwareLabel           String
  slug                    String                  @unique
  status                  String                  @default("Non d√©marr√©")
  updatedAt               DateTime                @updatedAt
  createdAt               DateTime                @default(now())
  createdBy               String                  @default("system")
  Project_Form            Project_Form[]
  Project_Processus_Order Project_Processus_Order @relation(fields: [orderId, clientId, projectLabel, softwareLabel], references: [id, clientId, projectLabel, softwareLabel])
  orderId                 String

  @@id([clientId, projectLabel, softwareLabel, id])
}

model Form {
  id            String
  label         String
  level         String       @default("Standard")
  description   String?
  isArchived    Boolean      @default(false)
  slug          String       @unique
  clientId      String?
  softwareLabel String?
  Client        Client?      @relation(fields: [clientId], references: [siren])
  Software      Software?    @relation(fields: [softwareLabel, clientId], references: [label, clientId])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  createdBy     String       @default("system")
  Form_Input    Form_Input[]
  processusId   String
  isDuplicate   Boolean      @default(false)
  idOrigin      String?
  Processus     Processus    @relation(fields: [processusId], references: [id])

  @@id([id, level])
}

model Project_Form {
  clientId           String
  softwareLabel      String
  label              String
  description        String?
  projectLabel       String
  slug               String               @unique
  id                 String
  processusId        String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  createdBy          String               @default("system")
  Project_Processus  Project_Processus    @relation(fields: [clientId, projectLabel, softwareLabel, processusId], references: [clientId, projectLabel, softwareLabel, id])
  Project            Project              @relation(fields: [clientId, projectLabel, softwareLabel], references: [clientId, label, softwareLabel])
  Project_Form_Input Project_Form_Input[]

  @@id([clientId, softwareLabel, projectLabel, id])
}

model Project_Form_Input {
  id                String
  type              String
  label             String
  slug              String       @unique
  formId            String
  zodLabel          String
  clientId          String
  softwareLabel     String
  projectLabel      String
  selectTableSource String?
  selectFieldSource String?
  selectOption      String?
  placeholder       String?
  minLenght         Int?
  defaultValue      String?
  maxLenght         Int?
  min               Int?
  max               Int?
  required          Boolean      @default(false)
  readOnly          Boolean      @default(false)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  createdBy         String       @default("system")
  Project_Form      Project_Form @relation(fields: [clientId, softwareLabel, projectLabel, formId], references: [clientId, softwareLabel, projectLabel, id])
  order             Int

  @@id([id, formId, label, clientId, softwareLabel, projectLabel])
}

model Form_Input {
  id                String
  type              String
  level             String    @default("Standard")
  label             String
  slug              String    @unique
  formId            String
  zodLabel          String
  clientId          String?
  softwareLabel     String?
  Client            Client?   @relation(fields: [clientId], references: [siren])
  Software          Software? @relation(fields: [softwareLabel, clientId], references: [label, clientId])
  placeholder       String?
  minLenght         Int?
  defaultValue      String?
  maxLenght         Int?
  min               Int?
  max               Int?
  selectTableSource String?
  selectFieldSource String?
  selectOption      String?
  required          Boolean   @default(false)
  readOnly          Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  createdBy         String    @default("system")
  Form              Form      @relation(fields: [formId, level], references: [id, level])
  order             Int

  @@id([id, level, formId, label])
}

model Prisma_Seed {
  name          String   @id
  description   String
  order         Int
  status        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String
  previousLabel String
  error         String?
}

model Task {
  label       String   @id()
  isSwitch    Boolean  @default(false)
  isUpload    Boolean  @default(false)
  accept      String?
  description String
  level       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   @default("system")
  bookLabel   String?
}

model Client_Task {
  label       String
  slug        String   @unique
  level       String
  isSwitch    Boolean  @default(false)
  isUpload    Boolean  @default(false)
  accept      String?
  description String
  clientId    String
  status      String   @default("actif")
  bookLabel   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   @default("system")
  owner       String
  message     String?
  dateStart   DateTime @default(now())
  deadline    DateTime
  Client      Client   @relation(fields: [clientId], references: [siren])

  @@id([label, clientId])
}

model Software_Task {
  label         String
  isSwitch      Boolean  @default(false)
  isUpload      Boolean  @default(false)
  isObligatory  Boolean  @default(false)
  accept        String
  slug          String   @unique
  softwareLabel String
  description   String
  multiple      Boolean  @default(false)
  clientId      String
  Software      Software @relation(fields: [softwareLabel, clientId], references: [label, clientId])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String   @default("system")

  @@id([label, clientId, softwareLabel])
}

model Project_Task {
  label         String
  slug          String   @unique
  level         String
  isSwitch      Boolean  @default(false)
  isUpload      Boolean  @default(false)
  accept        String?
  description   String
  softwareLabel String
  clientId      String
  status        String   @default("actif")
  projectLabel  String
  bookLabel     String?
  Project       Project  @relation(fields: [clientId, projectLabel, softwareLabel], references: [clientId, label, softwareLabel])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String   @default("system")
  owner         String
  message       String?
  dateStart     DateTime @default(now())
  deadline      DateTime
  User          User     @relation(fields: [owner], references: [id])

  @@id([label, clientId, projectLabel, softwareLabel, owner])
}

model Item {
  id                       String
  nature                   String
  label                    String?
  type                     String
  baseType                 String?
  base                     String?
  rateType                 String?
  rate                     String?
  coeffType                String?
  coeff                    String?
  amountType               String?
  amount                   String?
  employeeContributionType String?
  employerContributionType String?
  employerContribution     String?
  employeeContribution     String?
  comment                  String?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  createdBy                String

  @@id([id, type])
}

model Counter {
  id          String   @id
  label       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   @default("system")
  inHours     Boolean  @default(false)
  inDays      Boolean  @default(false)
  isArchived  Boolean  @default(false)
}

model Software_Counter {
  id            String
  label         String
  description   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String   @default("system")
  softwareLabel String
  clientId      String
  inHours       Boolean  @default(false)
  inDays        Boolean  @default(false)
  Software      Software @relation(fields: [softwareLabel, clientId], references: [label, clientId])
  isArchived    Boolean  @default(false)

  @@id([id, label, clientId, softwareLabel])
}

model Software_Profile {
  id            String
  label         String
  description   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String   @default("system")
  softwareLabel String
  clientId      String
  Software      Software @relation(fields: [softwareLabel, clientId], references: [label, clientId])
  isArchived    Boolean  @default(false)

  @@id([id, label, clientId, softwareLabel])
}

model Software_Absence {
  label            String
  id               String
  description      String?
  isSocialSecurity Boolean  @default(false)
  softwareLabel    String
  slug             String   @unique
  clientId         String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  createdBy        String   @default("system")
  dsnCode          String?
  dsnLabel         String?
  Software         Software @relation(fields: [softwareLabel, clientId], references: [label, clientId])
  methodOfCalcul   String
  population       String?
  itemHour         String?
  itemDay          String?
  counter          String?
  isPrintable      Boolean  @default(false)
  isArchived       Boolean  @default(false)

  @@id([label, id, clientId, softwareLabel])
}

model Default_Setting {
  id          String
  label       String
  description String?
  value       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   @default("system")

  @@id([id, label, value])
}

model Dsn_OPS {
  type     String
  id       String  @id
  label    String
  dsnId    String?
  address1 String?
  codeZip  String?
  city     String?
}

model Dsn_Absence {
  id        String   @id
  label     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   @default("system")
}

model TextArea {
  label       String   @id
  blockNote   Json
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   @default("system")
}

model Feedback {
  id         String   @id @default(cuid())
  feature    String
  message    String
  level      String
  isBlocked  Boolean  @default(false)
  isArchived Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  createdBy  String
}

model Project_DSN {
  projectLabel     String
  softwareLabel    String
  clientId         String
  dsnDate          String
  random           String
  dsnSiret         String
  Project          Project            @relation(fields: [clientId, projectLabel, softwareLabel], references: [clientId, label, softwareLabel])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  createdBy        String             @default("system")
  Project_DSN_Data Project_DSN_Data[]

  @@id([projectLabel, softwareLabel, clientId, dsnDate, dsnSiret])
}

model Project_DSN_Data {
  projectLabel  String
  softwareLabel String
  clientId      String
  id            String
  fraction      String
  value         String
  dsnDate       String
  dsnSiret      String
  label         String
  Project_DSN   Project_DSN @relation(fields: [projectLabel, softwareLabel, clientId, dsnDate, dsnSiret], references: [projectLabel, softwareLabel, clientId, dsnDate, dsnSiret])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  createdBy     String      @default("system")
  siret         String
  dsnId         String
  uuid          String      @default(cuid())

  @@id([projectLabel, softwareLabel, clientId, fraction, siret, dsnId, dsnDate, dsnSiret, uuid])
}

model Accumulation {
  id          String   @id
  label       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   @default("system")
}

model Software_Accumulation {
  id            String
  label         String
  description   String?
  clientId      String
  softwareLabel String
  Software      Software @relation(fields: [softwareLabel, clientId], references: [label, clientId])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String   @default("system")
  isArchived    Boolean  @default(false)
  slug          String   @unique

  @@id([id, label, clientId, softwareLabel])
}

model Classification {
  level       String   @default("Standard")
  id          String
  type        String
  label       String
  description String?
  idIdcc      String
  Idcc        Idcc?    @relation(fields: [idIdcc], references: [code])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   @default("system")

  @@id([id, idIdcc, type])
}

model Client_Classification {
  level       String   @default("Client")
  id          String
  slug        String   @unique
  type        String
  label       String
  description String?
  idIdcc      String
  clientId    String
  Idcc        Idcc?    @relation(fields: [idIdcc], references: [code])
  Client      Client   @relation(fields: [clientId], references: [siren])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   @default("system")

  @@id([id, idIdcc, type, clientId])
}

model Software_Classification {
  level         String   @default("Logiciel")
  id            String
  type          String
  slug          String   @unique
  label         String
  description   String?
  idIdcc        String
  clientId      String
  softwareLabel String
  Idcc          Idcc?    @relation(fields: [idIdcc], references: [code])
  Software      Software @relation(fields: [softwareLabel, clientId], references: [label, clientId])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String   @default("system")

  @@id([id, idIdcc, type, clientId, softwareLabel])
}

model Dsn_Structure {
  id    String @id
  label String
  type  String
}

model Project_Approve {
  clientId       String
  softwareLabel  String
  projectLabel   String
  rowSlug        String
  table          String
  userId         String
  processusLabel String
  valueId        String
  valueLabel     String
  slug           String   @unique
  response       String   @default("En attente")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      String   @default("system")
  User           User     @relation(fields: [userId], references: [id])
  Project        Project  @relation(fields: [clientId, softwareLabel, projectLabel], references: [clientId, softwareLabel, label])

  @@id([clientId, softwareLabel, projectLabel, rowSlug, table])
}

model Rate_At {
  id        String   @id
  label     String
  startDate String
  endDate   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   @default("system")
}

model Processus_Order {
  id        String      @id
  label     String
  order     Int
  updatedAt DateTime    @updatedAt
  createdAt DateTime    @default(now())
  createdBy String      @default("system")
  Processus Processus[]
}

model Project_Processus_Order {
  id                String
  label             String
  order             Int
  clientId          String
  slug              String              @unique
  softwareLabel     String
  projectLabel      String
  inProgress        Boolean             @default(false)
  updatedAt         DateTime            @updatedAt
  createdAt         DateTime            @default(now())
  createdBy         String              @default("system")
  Project_Processus Project_Processus[]
  Project           Project             @relation(fields: [clientId, projectLabel, softwareLabel], references: [clientId, label, softwareLabel])

  @@id([id, clientId, softwareLabel, projectLabel])
}
