// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  username      String?
  accounts      Account[]
  sessions      Session[]
  UserOtherData UserOtherData[]
  UserClient    UserClient[]
}

model UserOtherData {
  id        String   @id @default(cuid())
  userId    String
  password  String
  civility  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Client {
  id                 String               @id @default(cuid())
  socialReason       String               @unique
  dateStartTrial     DateTime
  dateEndTrial       DateTime
  siret              String               @unique
  ape                String
  address1           String
  address2           String?
  address3           String?
  address4           String?
  city               String
  codeZip            String
  country            String
  billingAddress1    String
  billingAddress2    String?
  billingAddress3    String?
  billingAddress4    String?
  billingCity        String
  billingCodeZip     String
  billingCountry     String
  isBlocked          Boolean
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  createdBy          String
  UserClient         UserClient[]
  Invitation         Invitation[]
  Contact            Contact[]
  Software           Software[]
  Standard_Composant Standard_Composant[]
}

model Contact {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String
  phone     String
  civility  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cretaedBy String
  clientId  String
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model UserClient {
  id              String   @id @default(cuid())
  userId          String
  clientId        String
  isBlocked       Boolean
  isBillable      Boolean
  isAdministrator Boolean  @default(false)
  isEditor        Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  client          Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model Invitation {
  id        String   @id @default(cuid())
  email     String   @unique
  sendEmail Boolean
  civility  String
  firstName String
  lastname  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String
  clientId  String
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model Software {
  id            String          @id @default(cuid())
  provider      String
  name          String          @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  createdBy     String
  clientId      String
  client        Client          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  Standard_Book Standard_Book[]
}

model Standard_Book {
  id         String    @id @default(cuid())
  name       String
  status     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  createdBy  String
  softwareId String
  software   Software  @relation(fields: [softwareId], references: [id], onDelete: Cascade)
  Chapter    Chapter[]
}

model Standard_Composant {
  id                       String                     @id @default(cuid())
  name                     String
  type                     String
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  createdBy                String
  clientId                 String
  client                   Client                     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  Standard_Composant_Input Standard_Composant_Input[]
  ChapterStdComposant      ChapterStdComposant[]
}

model Standard_Composant_Input {
  id                   String             @id @default(cuid())
  name                 String
  type                 String
  label                String
  maxLength            Int?
  minLength            Int?
  minValue             Int?
  maxValue             Int?
  required             Boolean
  readonly             Boolean
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  createdBy            String
  Standard_Composant   Standard_Composant @relation(fields: [standard_ComposantId], references: [id])
  standard_ComposantId String
  Standard_Input       Standard_Input     @relation(fields: [standard_InputName], references: [name])
  standard_InputName   String
}

model Standard_Input {
  name                     String                     @id
  type                     String
  label                    String
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  createdBy                String
  Standard_Composant_Input Standard_Composant_Input[]
}

model Chapter {
  id                  String                @id @default(cuid())
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  createdBy           String
  level               String
  label               String
  bookId              String
  book                Standard_Book         @relation(fields: [bookId], references: [id], onDelete: Cascade)
  ChapterStdComposant ChapterStdComposant[]
}

model ChapterStdComposant {
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  createdBy           String
  chapterId           String
  chapter             Chapter            @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  standardComposantId String
  standardComposant   Standard_Composant @relation(fields: [standardComposantId], references: [id], onDelete: Cascade)

  @@id([chapterId, standardComposantId])
}
