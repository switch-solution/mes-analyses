// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  username      String?
  accounts      Account[]
  sessions      Session[]
  UserOtherData UserOtherData[]
  UserClient    UserClient[]
  UserProject   UserProject[]
  UserSoftware  UserSoftware[]
  Validation    Validation[]
}

model UserOtherData {
  userId    String   @id
  firstname String?
  lastname  String?
  password  String?
  civility  String?
  cgv       Boolean  @default(false)
  gdpr      Boolean  @default(false)
  isBlocked Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Client {
  slug               String               @unique
  socialReason       String
  dateStartTrial     DateTime?
  dateEndTrial       DateTime?
  siren              String               @id
  ape                String?
  address1           String?
  address2           String?
  address3           String?
  address4           String?
  city               String?
  codeZip            String?
  country            String?
  invoiceAddress1    String?
  invoiceAddress2    String?
  invoiceAddress3    String?
  invoiceAddress4    String?
  invoiceCity        String?
  invoiceCodeZip     String?
  invoiceCountry     String?
  isBlocked          Boolean
  invoiceStart       DateTime?
  invoiceEnd         DateTime?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  createdBy          String
  UserClient         UserClient[]
  Invitation         Invitation[]
  Contact            Contact[]
  Software           Software[]
  Standard_Component Standard_Component[]
  Project            Project[]
  invoice            Invoice[]
  Logger             Logger[]
}

model Contact {
  id        String   @id @default(cuid())
  firstname String
  lastname  String
  email     String
  phone     String?
  civility  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String
  clientId  String
  client    Client   @relation(fields: [clientId], references: [siren], onDelete: Cascade)
}

model UserClient {
  userId          String
  clientId        String
  isBlocked       Boolean
  isBillable      Boolean
  isAdministrator Boolean  @default(false)
  isEditor        Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isActivated     Boolean  @default(false)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  client          Client   @relation(fields: [clientId], references: [siren], onDelete: Cascade)

  @@id([userId, clientId])
}

model Invitation {
  email      String   @unique
  sendEmail  Boolean
  civility   String
  firstName  String
  lastname   String
  isBlocked  Boolean  @default(false)
  isBillable Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  createdBy  String
  clientId   String
  client     Client   @relation(fields: [clientId], references: [siren], onDelete: Cascade)

  @@id([email, clientId])
}

model Software {
  label               String
  slug                String                @unique
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  createdBy           String
  clientId            String
  client              Client                @relation(fields: [clientId], references: [siren], onDelete: Cascade)
  Standard_Book       Standard_Book[]
  Standard_Component  Standard_Component[]
  SoftwareItems       Software_Items[]
  UserSoftware        UserSoftware[]
  Standard_Attachment Standard_Attachment[]
  Software_Constant   Software_Constant[]
  Software_Setting    Software_Setting[]

  @@id([label, clientId])
}

model UserSoftware {
  userId           String
  createdAt        DateTime @default(now())
  isEditor         Boolean  @default(false)
  updatedAt        DateTime @updatedAt
  createdBy        String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  software         Software @relation(fields: [softwareLabel, softwareClientId], references: [label, clientId], onDelete: Cascade)
  softwareLabel    String
  softwareClientId String

  @@id([userId, softwareLabel, softwareClientId])
}

model Standard_Book {
  label           String
  description     String
  status          String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  createdBy       String
  software        Software           @relation(fields: [softwareLabel, clientId], references: [label, clientId], onDelete: Cascade)
  softwareLabel   String
  clientId        String
  StandardChapter Standard_Chapter[]
  slug            String             @unique

  @@id([label, softwareLabel, clientId])
}

model Standard_Component {
  label                       String
  description                 String
  type                        String
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  createdBy                   String
  clientId                    String
  version                     Int
  slug                        String                        @unique
  status                      String
  software                    Software                      @relation(fields: [softwareLabel, clientId], references: [label, clientId], onDelete: Cascade)
  softwareLabel               String
  client                      Client                        @relation(fields: [clientId], references: [siren], onDelete: Cascade)
  Standard_Component_Input    Standard_Component_Input[]
  ChapterStdComponent         ChapterStdComponent[]
  Standard_Component_TextArea Standard_Component_TextArea[]
  Standard_Component_Image    Standard_Component_Image[]
  SandboxValues               SandboxValues[]

  @@id([label, softwareLabel, clientId, type])
}

model Standard_Component_Input {
  type                             String
  label                            String
  maxLength                        Int?                               @default(255)
  minLength                        Int?                               @default(0)
  minValue                         Int?                               @default(0)
  maxValue                         Int?                               @default(9999)
  placeholder                      String?                            @default("Saisir une valeur")
  order                            Int
  inputSource                      String?
  defaultValue                     String?                            @default("")
  required                         Boolean?                           @default(false)
  readonly                         Boolean?                           @default(false)
  multiple                         Boolean?                           @default(false)
  createdAt                        DateTime                           @default(now())
  updatedAt                        DateTime                           @updatedAt
  createdBy                        String
  Standard_Component               Standard_Component                 @relation(fields: [componentLabel, softwareLabel, clientId, componentType], references: [label, softwareLabel, clientId, type], onDelete: Cascade)
  componentLabel                   String
  softwareLabel                    String
  clientId                         String
  componentType                    String
  id                               String                             @unique @default(cuid())
  Standard_Component_Select_Option Standard_Component_Select_Option[]
  SandboxValues                    SandboxValues[]

  @@id([componentLabel, softwareLabel, clientId, label])
}

model Standard_Component_TextArea {
  value              String
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  createdBy          String
  Standard_Component Standard_Component @relation(fields: [componentLabel, softwareLabel, componentType, clientId], references: [label, softwareLabel, type, clientId], onDelete: Cascade)
  clientId           String
  componentLabel     String
  componentType      String
  softwareLabel      String

  @@id([componentLabel, softwareLabel, clientId, componentType])
}

model Standard_Component_Image {
  description        String
  slug               String             @unique
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  createdBy          String
  Standard_Component Standard_Component @relation(fields: [componentLabel, softwareLabel, componentType, clientId], references: [label, softwareLabel, type, clientId], onDelete: Cascade)
  clientId           String
  componentLabel     String
  softwareLabel      String
  version            Int
  componentType      String
  url                String
  device             String

  @@id([componentLabel, softwareLabel, clientId, version, componentType])
}

model Standard_Component_Select_Option {
  label                    String
  selected                 Boolean?
  value                    String
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  createdBy                String
  Standard_Composant_Input Standard_Component_Input? @relation(fields: [inputLabel, clientId, softwareLabel, componentLabel], references: [label, clientId, softwareLabel, componentLabel], onDelete: Cascade)
  clientId                 String
  componentLabel           String
  softwareLabel            String
  inputLabel               String

  @@id([inputLabel, clientId, softwareLabel, componentLabel, label])
}

model Standard_Chapter {
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  createdBy           String
  level_1             Int
  level_2             Int
  level_3             Int
  id                  String                @unique @default(cuid())
  slug                String                @unique
  label               String
  book                Standard_Book         @relation(fields: [clientId, bookLabel, bookSoftwareLabel], references: [clientId, label, softwareLabel], onDelete: Cascade)
  clientId            String
  bookLabel           String
  bookSoftwareLabel   String
  ChapterStdComposant ChapterStdComponent[]
  parentId            String?
  parent              Standard_Chapter?     @relation("levelUp", fields: [parentId], references: [id])
  Standard_Chapter    Standard_Chapter[]    @relation("levelUp")

  @@id([clientId, bookLabel, bookSoftwareLabel, level_1, level_2, level_3])
}

model ChapterStdComponent {
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  createdBy          String
  StandardChapter    Standard_Chapter   @relation(fields: [clientId, bookLabel, bookSoftwareLabel, level_1, level_2, level_3], references: [clientId, bookLabel, bookSoftwareLabel, level_1, level_2, level_3], onDelete: Cascade)
  Standard_Component Standard_Component @relation(fields: [componentLabel, softwareLabel, clientId, componentType], references: [label, softwareLabel, clientId, type], onDelete: Cascade)
  componentLabel     String
  softwareLabel      String
  clientId           String
  componentType      String
  bookLabel          String
  bookSoftwareLabel  String
  level_1            Int
  level_2            Int
  level_3            Int

  @@id([clientId, bookLabel, bookSoftwareLabel, level_1, level_2, level_3, componentLabel, softwareLabel, componentType])
}

model Project {
  clientId           String
  client             Client               @relation(fields: [clientId], references: [siren], onDelete: Cascade)
  label              String
  description        String
  status             String               @default("actif")
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  createdBy          String
  softwareLabel      String
  UserProject        UserProject[]
  Project_Book       Project_Book[]
  Dsn                Dsn[]
  Logger             Logger[]
  Project_Attachment Project_Attachment[]
  slug               String               @unique
  Project_Constant   Project_Constant[]
  Project_Items      Project_Items[]

  @@id([clientId, softwareLabel, label])
}

model UserProject {
  userId               String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  createdBy            String
  isAdmin              Boolean  @default(false)
  isEditor             Boolean  @default(false)
  isValidator          Boolean  @default(false)
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project              Project  @relation(fields: [projectClientId, projectLabel, projectSoftwareLabel], references: [clientId, label, softwareLabel], onDelete: Cascade)
  projectClientId      String
  projectSoftwareLabel String
  projectLabel         String

  @@id([userId, projectClientId, projectLabel, projectSoftwareLabel])
}

model Project_Book {
  label                String
  slug                 String            @unique
  description          String
  status               String
  softwareId           String
  isArchived           Boolean           @default(false)
  ProjectChapter       Project_Chapter[]
  Validation           Validation[]
  project              Project           @relation(fields: [clientId, projectLabel, projectSoftwareLabel], references: [clientId, label, softwareLabel], onDelete: Cascade)
  clientId             String
  projectLabel         String
  projectSoftwareLabel String
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  createdBy            String

  @@id([clientId, label, projectLabel, projectSoftwareLabel])
}

model Project_Chapter {
  level_1              Int
  level_2              Int
  level_3              Int
  label                String
  parentId             String?
  parent               Project_Chapter?   @relation("levelUp", fields: [bookLabel, clientId, projectLabel, level_1, level_2, level_3, projectSoftwareLabel], references: [bookLabel, clientId, projectLabel, level_1, level_2, level_3, projectSoftwareLabel])
  Project_Chapter      Project_Chapter[]  @relation("levelUp")
  Project_Component    Projet_Component[]
  Project_Book         Project_Book       @relation(fields: [clientId, bookLabel, projectLabel, projectSoftwareLabel], references: [clientId, label, projectLabel, projectSoftwareLabel])
  clientId             String
  bookLabel            String
  bookSoftwareId       String
  projectLabel         String
  projectSoftwareLabel String
  slug                 String             @unique
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  createdBy            String

  @@id([bookLabel, clientId, projectLabel, projectSoftwareLabel, level_1, level_2, level_3])
}

model Projet_Component {
  slug                 String           @unique
  title                String
  description          String
  type                 String
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  createdBy            String
  Project_Chapter      Project_Chapter? @relation(fields: [bookLabel, projectLabel, clientId, chapterLevel_1, chapterLevel_2, chapterLevel_3, projectSoftwareLabel], references: [bookLabel, projectLabel, clientId, level_1, level_2, level_3, projectSoftwareLabel], onDelete: Cascade)
  chapterSlug          String?
  bookLabel            String
  projectLabel         String
  projectSoftwareLabel String
  clientId             String
  chapterLevel_1       Int
  chapterLevel_2       Int
  chapterLevel_3       Int
  Project_Input        Project_Input[]

  @@id([bookLabel, projectLabel, clientId, chapterLevel_1, chapterLevel_2, chapterLevel_3, projectSoftwareLabel])
}

model Project_Input {
  slug                 String            @unique
  type                 String
  label                String
  maxLength            Int?
  minLength            Int?
  minValue             Int?
  maxValue             Int?
  placeholder          String?
  order                Int
  defaultValue         String?
  required             Boolean
  readonly             Boolean
  inputSource          String?
  multiple             Boolean?
  textArea             String
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  createdBy            String
  Projet_Composant     Projet_Component? @relation(fields: [bookLabel, projectLabel, clientId, chapterLevel_1, chapterLevel_2, chapterLevel_3, projectSoftwareLabel], references: [bookLabel, projectLabel, clientId, chapterLevel_1, chapterLevel_2, chapterLevel_3, projectSoftwareLabel], onDelete: Cascade)
  clientId             String
  bookLabel            String
  projectLabel         String
  projectSoftwareLabel String
  chapterLevel_1       Int
  chapterLevel_2       Int
  chapterLevel_3       Int
  Project_Value        Project_Value[]
  Project_Option       Project_Option[]

  @@id([clientId, bookLabel, projectLabel, chapterLevel_1, chapterLevel_2, chapterLevel_3, label, projectSoftwareLabel])
}

model Project_Value {
  slug                 String        @unique
  version              Int
  textValue            String?
  numberValue          Int?
  booleanValue         Boolean?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  createdBy            String
  Project_Input        Project_Input @relation(fields: [clientId, bookLabel, projectLabel, chapterLevel_1, chapterLevel_2, chapterLevel_3, inputLabel, projectSoftwareLabel], references: [clientId, bookLabel, projectLabel, chapterLevel_1, chapterLevel_2, chapterLevel_3, label, projectSoftwareLabel])
  clientId             String
  bookLabel            String
  inputLabel           String
  projectLabel         String
  projectSoftwareLabel String
  chapterLevel_1       Int
  chapterLevel_2       Int
  chapterLevel_3       Int

  @@id([clientId, bookLabel, inputLabel, projectLabel, chapterLevel_1, chapterLevel_2, chapterLevel_3, version, projectSoftwareLabel])
}

model Project_Option {
  label                String
  selected             Boolean?
  Project_Input        Project_Input? @relation(fields: [clientId, bookLabel, inputLabel, projectLabel, chapterLevel_1, chapterLevel_2, chapterLevel_3, projectSoftwareLabel], references: [clientId, bookLabel, label, projectLabel, chapterLevel_1, chapterLevel_2, chapterLevel_3, projectSoftwareLabel])
  inputId              String?
  clientId             String
  bookLabel            String
  inputLabel           String
  projectLabel         String
  projectSoftwareLabel String
  chapterLevel_1       Int
  chapterLevel_2       Int
  chapterLevel_3       Int
  version              Int
  value                String

  @@id([clientId, bookLabel, inputLabel, projectLabel, chapterLevel_1, chapterLevel_2, chapterLevel_3, label, version, projectSoftwareLabel])
}

model Dsn {
  siren                String
  nic                  String
  version              String
  fraction             String
  month                String
  type                 String
  project              Project             @relation(fields: [clientId, projectLabel, projectSoftwareLabel], references: [clientId, label, softwareLabel], onDelete: Cascade)
  clientId             String
  projectLabel         String
  projectSoftwareLabel String
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  createdBy            String
  DsnEstablishment     Dsn_Establishment[]
  DsnIdcc              Dsn_Idcc[]
  Dsn_Job              Dsn_Job[]

  @@id([siren, nic, month, version, fraction])
}

model Dsn_Establishment {
  nic                 String
  apet                String
  address1            String
  address2            String?
  address3            String?
  codeZip             String
  city                String
  country             String                 @default("FR")
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  createdBy           String
  Dsn                 Dsn                    @relation(fields: [dsnSiren, dsnNic, dsnMonth, dsnVersion, dsnFraction], references: [siren, nic, month, version, fraction])
  dsnSiren            String
  dsnNic              String
  dsnMonth            String
  dsnVersion          String
  dsnFraction         String
  DsnContributionFund Dsn_ContributionFund[]
  Dsn_RateAt          Dsn_RateAt[]

  @@id([nic, dsnSiren, dsnNic, dsnMonth, dsnVersion, dsnFraction])
}

model Dsn_RateAt {
  code                        String
  rate                        String
  createdAt                   DateTime          @default(now())
  updatedAt                   DateTime          @updatedAt
  createdBy                   String
  Dsn_Establishment           Dsn_Establishment @relation(fields: [dsnEstablishmentNic, dsnEstablishmentDsnSiren, dsnEstablishmentDsnNic, dsnEstablishmentDsnMonth, dsnEstablishmentDsnVersion, dsnEstablishmentDsnFraction], references: [nic, dsnSiren, dsnNic, dsnMonth, dsnVersion, dsnFraction])
  dsnEstablishmentNic         String
  dsnEstablishmentDsnSiren    String
  dsnEstablishmentDsnNic      String
  dsnEstablishmentDsnMonth    String
  dsnEstablishmentDsnVersion  String
  dsnEstablishmentDsnFraction String

  @@id([code, dsnEstablishmentNic, dsnEstablishmentDsnSiren, dsnEstablishmentDsnNic, dsnEstablishmentDsnMonth, dsnEstablishmentDsnVersion, dsnEstablishmentDsnFraction])
}

model Dsn_ContributionFund {
  code                        String
  name                        String
  address1                    String
  address2                    String?
  address3                    String?
  city                        String
  codeZip                     String
  country                     String            @default("FR")
  createdAt                   DateTime          @default(now())
  updatedAt                   DateTime          @updatedAt
  createdBy                   String
  Dsn_Establishment           Dsn_Establishment @relation(fields: [dsnEstablishmentNic, dsnEstablishmentDsnSiren, dsnEstablishmentDsnNic, dsnEstablishmentDsnMonth, dsnEstablishmentDsnVersion, dsnEstablishmentDsnFraction], references: [nic, dsnSiren, dsnNic, dsnMonth, dsnVersion, dsnFraction])
  dsnEstablishmentNic         String
  dsnEstablishmentDsnSiren    String
  dsnEstablishmentDsnNic      String
  dsnEstablishmentDsnMonth    String
  dsnEstablishmentDsnVersion  String
  dsnEstablishmentDsnFraction String

  @@id([code, dsnEstablishmentNic, dsnEstablishmentDsnSiren, dsnEstablishmentDsnNic, dsnEstablishmentDsnMonth, dsnEstablishmentDsnVersion, dsnEstablishmentDsnFraction])
}

model Dsn_Idcc {
  code        String
  label       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  Dsn         Dsn      @relation(fields: [dsnSiren, dsnNic, dsnMonth, dsnVersion, dsnFraction], references: [siren, nic, month, version, fraction])
  dsnSiren    String
  dsnNic      String
  dsnMonth    String
  dsnVersion  String
  dsnFraction String

  @@id([code, dsnSiren, dsnNic, dsnMonth, dsnVersion, dsnFraction])
}

model Dsn_Job {
  label       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  Dsn         Dsn      @relation(fields: [dsnSiren, dsnNic, dsnMonth, dsnVersion, dsnFraction], references: [siren, nic, month, version, fraction])
  dsnSiren    String
  dsnNic      String
  dsnMonth    String
  dsnVersion  String
  dsnFraction String

  @@id([label, dsnSiren, dsnNic, dsnMonth, dsnVersion, dsnFraction])
}

model Setting {
  code        String
  label       String
  description String?
  value       String
  dateStart   DateTime
  dateEnd     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String

  @@id([code, dateStart, dateEnd])
}

model Invoice {
  socialReason String
  clientId     String
  client       Client        @relation(fields: [clientId], references: [siren], onDelete: Cascade)
  dateStart    DateTime
  dateEnd      DateTime
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  createdBy    String
  dateLimit    DateTime
  status       String
  quantity     Int
  amount       Float
  InvoiceLine  InvoiceLine[]
  slug         String        @unique

  @@id([clientId, dateStart, dateEnd])
}

model InvoiceLine {
  invoice   Invoice  @relation(fields: [clientId, dateStart, dateEnd], references: [clientId, dateStart, dateEnd], onDelete: Cascade)
  label     String
  clientId  String
  dateStart DateTime
  dateEnd   DateTime
  email     String
  firstname String?
  lastname  String?
  quantity  Int
  amount    Float
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String

  @@id([label, clientId, dateStart, dateEnd])
}

model Logger {
  id                   String   @id @default(cuid())
  level                String
  message              String
  scope                String
  timestamp            DateTime @default(now())
  createdBy            String
  clientId             String?
  userId               String?
  client               Client?  @relation(fields: [clientId], references: [siren])
  project              Project? @relation(fields: [clientId, projectLabel, projectSoftwareLabel], references: [clientId, label, softwareLabel])
  projectSoftwareLabel String?
  projectLabel         String?
}

model SandboxValues {
  Standard_Component_Input Standard_Component_Input @relation(fields: [componentLabel, softwareLabel, clientId, inputLabel], references: [componentLabel, softwareLabel, clientId, label], onDelete: Cascade)
  value                    String
  createdBy                String
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @updatedAt
  Standard_Component       Standard_Component       @relation(fields: [componentLabel, softwareLabel, clientId, componentType], references: [label, softwareLabel, clientId, type])
  version                  Int
  componentLabel           String
  softwareLabel            String
  clientId                 String
  componentType            String
  inputLabel               String
  versionId                Int

  @@id([clientId, componentLabel, softwareLabel, componentType, inputLabel, version])
}

model Software_Items {
  id                   String
  slug                 String   @unique
  software             Software @relation(fields: [softwareLabel, clientId], references: [label, clientId], onDelete: Cascade)
  softwareLabel        String
  clientId             String
  type                 String
  label                String
  description          String
  idccCode             String
  Idcc                 Idcc?    @relation(fields: [idccCode], references: [code])
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  createdBy            String
  base                 String?
  rate                 String?
  amount               String?
  status               String?
  employeeContribution String?
  employerContribution String?
  dateStart            DateTime

  @@id([id, type, softwareLabel, clientId, dateStart])
}

model Software_Setting {
  id            String
  label         String
  description   String?
  value         String
  dateStart     DateTime
  dateEnd       DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String
  softwareLabel String
  clientId      String
  slug          String   @unique
  comment       String?
  Software      Software @relation(fields: [softwareLabel, clientId], references: [label, clientId], onDelete: Cascade)

  @@id([id, label, value, dateStart, clientId, softwareLabel])
}

model Project_Items {
  id                   String
  project              Project  @relation(fields: [projectLabel, projectSoftwareLabel, clientId], references: [label, softwareLabel, clientId], onDelete: Cascade)
  projectLabel         String
  projectSoftwareLabel String
  clientId             String
  type                 String
  label                String
  description          String
  idccCode             String
  Idcc                 Idcc?    @relation(fields: [idccCode], references: [code])
  version              Int
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  createdBy            String
  base                 String
  rate                 String
  amount               String
  status               String
  employeeContribution String
  employerContribution String

  @@id([id, type, projectLabel, projectSoftwareLabel, clientId, version])
}

model Constant_Legal {
  id          String
  label       String
  description String?
  idccCode    String   @default("9999")
  Idcc        Idcc?    @relation(fields: [idccCode], references: [code])
  value       String
  dateStart   DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  slug        String   @unique

  @@id([id, dateStart])
}

model Software_Constant {
  id            String
  label         String
  description   String?
  idccCode      String   @default("9999")
  Idcc          Idcc?    @relation(fields: [idccCode], references: [code])
  value         String
  dateStart     DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String
  slug          String   @unique
  softwareLabel String
  clientId      String
  Software      Software @relation(fields: [softwareLabel, clientId], references: [label, clientId], onDelete: Cascade)

  @@id([id, dateStart, softwareLabel, clientId])
}

model Project_Constant {
  code                 String
  label                String
  description          String
  idccCode             String
  Idcc                 Idcc?    @relation(fields: [idccCode], references: [code])
  value                String
  dateStart            DateTime
  dateEnd              DateTime
  projectLabel         String
  projectSoftwareLabel String
  clientId             String
  Project              Project  @relation(fields: [clientId, projectLabel, projectSoftwareLabel], references: [clientId, label, softwareLabel], onDelete: Cascade)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  createdBy            String

  @@id([code, dateStart, dateEnd, projectLabel, projectSoftwareLabel, clientId])
}

model Idcc {
  code              String              @id
  label             String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  createdBy         String              @default("System")
  SoftwareItems     Software_Items[]
  ConstantLegal     Constant_Legal[]
  ProjectConstant   Project_Constant[]
  Project_Items     Project_Items[]
  Software_Constant Software_Constant[]
}

model Standard_Attachment {
  slug          String   @unique
  label         String
  description   String
  isObligatory  Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String
  software      Software @relation(fields: [softwareLabel, clientId], references: [label, clientId], onDelete: Cascade)
  softwareLabel String
  clientId      String
  isDsn         Boolean  @default(false)
  multiple      Boolean  @default(false)
  accept        String   @default("pdf")

  @@id([label, softwareLabel, clientId])
}

model Validation {
  Project_Book         Project_Book @relation(fields: [bookLabel, clientId, projectLabel, projectSoftwareLabel], references: [label, clientId, projectLabel, projectSoftwareLabel])
  bookLabel            String
  clientId             String
  projectLabel         String
  projectSoftwareLabel String
  response             String
  userId               String
  User                 User         @relation(fields: [userId], references: [id])
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  createdBy            String

  @@id([bookLabel, userId, clientId, projectLabel, projectSoftwareLabel])
}

model Project_Attachment {
  id                   String   @id @default(cuid())
  label                String
  description          String
  slug                 String   @unique
  isObligatory         Boolean
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  createdBy            String
  projectId            String
  project              Project? @relation(fields: [clientId, projectLabel, projectSoftwareLabel], references: [clientId, label, softwareLabel])
  projectLabel         String?
  projectSoftwareLabel String?
  clientId             String?
}

model Form {
  title       String
  type        String
  description String
  status      String
  version     Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  createdBy   String
  Form_Input  Form_Input[]

  @@id([title, type, version])
}

model Form_Input {
  type         String
  label        String
  maxLength    Int?
  minLength    Int?
  minValue     Int?
  maxValue     Int?
  placeholder  String?
  order        Int
  defaultValue String?
  required     Boolean
  readonly     Boolean
  multiple     Boolean?
  inputSource  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String
  Form         Form     @relation(fields: [formTitle, formType, formVersion], references: [title, type, version])
  formTitle    String
  formType     String
  formVersion  Int

  @@id([formTitle, formType, formVersion, type, label])
}

model Input {
  name      String
  type      String   @id
  label     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String
}

model Prisma_Seed {
  name      String   @id
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String
}
